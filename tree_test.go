package nradix

import (
	"net/netip"
	"testing"
)

var (
	testPrefixesV4 = []string{
		"0.0.0.0/32",
		"0.101.140.200/32",
		"0.128.0.0/32",
		"1.5.112.0/32",
		"1.142.0.0/32",
		"1.192.0.0/32",
		"1.200.72.64/32",
		"1.208.0.0/32",
		"2.52.171.0/32",
		"2.63.236.0/32",
		"2.74.141.0/32",
		"2.92.100.80/32",
		"2.124.0.0/32",
		"2.180.235.176/32",
		"3.221.232.116/32",
		"4.9.0.0/32",
		"4.105.64.0/32",
		"5.1.67.166/32",
		"5.90.0.0/32",
		"5.108.0.0/32",
		"5.192.0.0/32",
		"6.128.0.0/32",
		"6.163.77.104/32",
		"7.64.0.0/32",
		"7.118.64.0/32",
		"8.0.0.0/32",
		"8.128.0.0/32",
		"8.189.160.0/32",
		"8.218.0.0/32",
		"9.29.186.0/32",
		"9.121.248.0/32",
		"10.36.92.172/32",
		"10.72.0.0/32",
		"10.79.90.0/32",
		"10.81.102.192/32",
		"10.192.0.0/32",
		"11.0.0.0/32",
		"11.2.195.0/32",
		"11.67.0.0/32",
		"11.96.0.0/32",
		"11.111.89.144/32",
		"11.128.0.0/32",
		"11.174.112.0/32",
		"11.229.73.160/32",
		"12.0.0.0/32",
		"12.51.19.80/32",
		"12.56.0.0/32",
		"12.192.0.0/32",
		"13.170.40.0/32",
		"14.69.53.192/32",
		"14.216.0.0/32",
		"14.219.137.112/32",
		"14.221.136.0/32",
		"15.84.0.0/32",
		"15.84.142.0/32",
		"15.119.80.0/32",
		"15.167.66.0/32",
		"16.0.0.0/32",
		"16.146.224.0/32",
		"16.197.158.64/32",
		"17.10.182.16/32",
		"17.128.0.0/32",
		"17.197.120.0/32",
		"17.201.210.0/32",
		"18.93.138.160/32",
		"18.128.0.0/32",
		"18.140.0.0/32",
		"18.142.64.0/32",
		"18.181.72.240/32",
		"18.192.0.0/32",
		"20.61.0.0/32",
		"20.72.192.0/32",
		"20.228.0.0/32",
		"21.96.0.0/32",
		"21.120.0.0/32",
		"21.141.70.11/32",
		"22.0.0.0/32",
		"22.152.115.245/32",
		"22.162.0.0/32",
		"22.224.0.0/32",
		"22.226.147.216/32",
		"23.99.154.0/32",
		"23.112.0.0/32",
		"23.152.90.0/32",
		"23.216.235.240/32",
		"24.0.0.0/32",
		"25.27.132.40/32",
		"25.55.144.0/32",
		"25.111.40.0/32",
		"25.184.0.0/32",
		"26.180.0.0/32",
		"27.4.32.0/32",
		"27.6.150.62/32",
		"27.248.0.0/32",
		"28.13.81.0/32",
		"28.46.224.0/32",
		"28.173.0.0/32",
		"28.184.81.128/32",
		"28.208.0.0/32",
		"29.143.218.149/32",
		"29.252.0.0/32",
		"30.32.0.0/32",
		"30.68.246.196/32",
		"30.79.0.0/32",
		"30.122.0.0/32",
		"30.220.200.0/32",
		"31.25.36.0/32",
		"31.77.224.0/32",
		"32.0.0.0/32",
		"32.40.0.0/32",
		"32.128.0.0/32",
		"33.0.0.0/32",
		"33.32.0.0/32",
		"33.167.0.0/32",
		"34.198.0.0/32",
		"35.64.185.0/32",
		"35.88.0.0/32",
		"35.101.21.128/32",
		"35.128.0.0/32",
		"35.191.242.48/32",
		"36.0.0.0/32",
		"36.13.128.0/32",
		"36.96.0.0/32",
		"36.148.0.0/32",
		"36.150.103.221/32",
		"36.248.154.208/32",
		"37.6.0.0/32",
		"37.62.74.0/32",
		"37.177.80.0/32",
		"37.178.224.0/32",
		"37.229.176.0/32",
		"37.245.0.0/32",
		"38.0.0.0/32",
		"38.200.176.0/32",
		"39.9.0.0/32",
		"39.47.192.0/32",
		"40.0.0.0/32",
		"41.171.213.0/32",
		"41.240.0.0/32",
		"42.10.144.0/32",
		"42.83.128.0/32",
		"42.131.209.192/32",
		"42.236.99.36/32",
		"43.39.128.0/32",
		"43.70.0.0/32",
		"44.0.0.0/32",
		"45.96.124.0/32",
		"45.152.0.0/32",
		"46.0.0.0/32",
		"46.24.28.0/32",
		"46.113.49.128/32",
		"46.205.236.0/32",
		"46.252.64.0/32",
		"47.204.151.0/32",
		"48.0.0.0/32",
		"48.109.128.0/32",
		"48.244.0.0/32",
		"49.4.4.0/32",
		"49.4.173.64/32",
		"49.25.32.0/32",
		"49.45.125.65/32",
		"49.178.235.56/32",
		"50.142.208.0/32",
		"50.142.216.108/32",
		"50.197.76.128/32",
		"50.224.0.0/32",
		"51.244.116.192/32",
		"52.0.0.0/32",
		"52.32.0.0/32",
		"52.249.25.128/32",
		"53.0.0.0/32",
		"53.1.229.160/32",
		"53.142.0.0/32",
		"54.0.0.0/32",
		"54.160.0.0/32",
		"54.211.0.0/32",
		"55.4.192.0/32",
		"55.64.0.0/32",
		"55.75.0.0/32",
		"55.96.0.0/32",
		"55.144.150.0/32",
		"55.176.224.0/32",
		"55.247.10.236/32",
		"56.0.0.0/32",
		"56.18.125.138/32",
		"56.120.0.152/32",
		"57.32.0.0/32",
		"57.228.0.0/32",
		"58.0.0.0/32",
		"58.108.192.0/32",
		"58.237.235.0/32",
		"58.245.199.128/32",
		"58.246.207.128/32",
		"59.208.209.248/32",
		"59.211.36.128/32",
		"60.96.0.0/32",
		"60.136.64.0/32",
		"60.229.141.108/32",
		"61.26.142.104/32",
		"61.87.168.0/32",
		"61.246.0.0/32",
		"62.0.0.0/32",
		"62.48.0.0/32",
		"62.147.10.176/32",
		"62.180.15.64/32",
		"63.10.102.32/32",
		"63.128.0.0/32",
		"63.130.4.176/32",
		"64.0.0.0/32",
		"64.96.0.0/32",
		"64.237.64.0/32",
		"65.0.0.0/32",
		"65.42.166.88/32",
		"65.50.200.0/32",
		"65.67.144.137/32",
		"65.158.0.0/32",
		"65.214.160.0/32",
		"65.224.0.0/32",
		"66.0.0.0/32",
		"66.94.0.0/32",
		"66.131.147.107/32",
		"67.24.0.0/32",
		"67.47.69.82/32",
		"67.128.0.0/32",
		"67.240.93.110/32",
		"68.199.0.0/32",
		"69.0.0.0/32",
		"69.149.112.0/32",
		"70.54.201.0/32",
		"70.60.128.0/32",
		"70.95.212.0/32",
		"70.127.170.204/32",
		"70.159.0.0/32",
		"71.64.0.0/32",
		"71.88.234.0/32",
		"71.192.0.0/32",
		"71.200.64.0/32",
		"71.249.123.236/32",
		"72.0.0.0/32",
		"72.70.32.0/32",
		"73.0.0.0/32",
		"73.72.61.0/32",
		"73.80.0.0/32",
		"73.128.0.0/32",
		"73.224.0.0/32",
		"74.0.0.0/32",
		"74.189.69.0/32",
		"74.229.41.64/32",
		"75.0.0.0/32",
		"75.37.0.0/32",
		"75.64.0.0/32",
		"75.170.208.0/32",
		"76.72.32.0/32",
		"76.248.0.0/32",
		"76.249.137.128/32",
		"77.9.34.16/32",
		"77.52.192.0/32",
		"77.86.197.248/32",
		"77.128.0.0/32",
		"77.174.128.32/32",
		"77.186.200.0/32",
		"78.141.160.0/32",
		"78.199.58.61/32",
		"78.224.24.136/32",
		"79.48.27.116/32",
		"79.212.216.128/32",
		"79.248.218.0/32",
		"80.0.0.0/32",
		"80.89.246.208/32",
		"80.173.112.0/32",
		"80.174.201.0/32",
		"81.29.175.128/32",
		"81.147.228.0/32",
		"82.0.0.0/32",
		"82.190.69.61/32",
		"82.231.96.48/32",
		"83.64.0.0/32",
		"83.71.128.0/32",
		"83.149.72.0/32",
		"83.164.96.0/32",
		"84.0.0.0/32",
		"84.128.0.0/32",
		"85.0.0.0/32",
		"85.26.180.64/32",
		"85.98.224.0/32",
		"85.129.128.0/32",
		"86.0.0.0/32",
		"86.59.38.222/32",
		"87.29.0.0/32",
		"87.210.146.69/32",
		"88.0.0.0/32",
		"88.233.107.56/32",
		"89.0.0.0/32",
		"89.128.0.0/32",
		"89.242.201.0/32",
		"90.21.27.0/32",
		"90.31.251.80/32",
		"90.64.0.0/32",
		"90.107.50.0/32",
		"90.128.0.0/32",
		"90.131.169.144/32",
		"91.60.0.0/32",
		"91.115.192.0/32",
		"92.47.238.0/32",
		"92.84.0.0/32",
		"92.128.0.0/32",
		"92.204.138.88/32",
		"93.0.0.0/32",
		"94.0.0.0/32",
		"94.239.0.0/32",
		"95.45.151.0/32",
		"96.0.0.0/32",
		"96.0.107.128/32",
		"96.166.192.0/32",
		"96.168.192.0/32",
		"96.186.3.21/32",
		"97.176.0.0/32",
		"98.0.0.0/32",
		"98.2.60.0/32",
		"98.8.121.4/32",
		"98.27.4.192/32",
		"98.176.118.0/32",
		"99.0.0.0/32",
		"99.85.0.0/32",
		"99.88.0.0/32",
		"99.128.0.0/32",
		"99.186.166.0/32",
		"99.245.0.0/32",
		"99.253.128.0/32",
		"100.0.0.0/32",
		"100.87.144.0/32",
		"100.102.0.0/32",
		"100.136.81.128/32",
		"101.106.99.0/32",
		"101.197.0.0/32",
		"102.206.0.0/32",
		"103.152.4.227/32",
		"103.198.0.0/32",
		"103.228.32.0/32",
		"104.0.0.0/32",
		"104.6.122.96/32",
		"104.16.81.228/32",
		"104.70.0.0/32",
		"104.96.0.0/32",
		"104.184.0.0/32",
		"104.194.0.0/32",
		"104.229.64.0/32",
		"104.251.0.0/32",
		"105.0.0.0/32",
		"106.0.0.0/32",
		"106.35.121.128/32",
		"106.169.8.0/32",
		"106.199.128.0/32",
		"107.32.0.0/32",
		"107.34.55.0/32",
		"107.83.154.0/32",
		"107.128.0.0/32",
		"107.148.0.0/32",
		"107.152.0.0/32",
		"108.0.0.0/32",
		"108.41.192.0/32",
		"108.120.224.0/32",
		"108.225.96.0/32",
		"109.0.0.0/32",
		"109.22.7.64/32",
		"110.32.0.0/32",
		"110.128.0.0/32",
		"110.173.35.200/32",
		"110.189.192.0/32",
		"111.52.193.144/32",
		"111.93.0.0/32",
		"111.192.0.0/32",
		"111.248.192.0/32",
		"111.250.220.248/32",
		"112.0.0.0/32",
		"112.10.39.128/32",
		"112.238.10.0/32",
		"113.11.84.0/32",
		"113.20.65.224/32",
		"113.202.0.0/32",
		"114.0.0.0/32",
		"114.108.229.176/32",
		"114.141.26.128/32",
		"114.206.38.176/32",
		"115.111.128.0/32",
		"115.133.96.0/32",
		"115.180.0.0/32",
		"115.238.180.32/32",
		"115.245.4.192/32",
		"115.249.16.168/32",
		"116.80.0.0/32",
		"117.0.0.0/32",
		"117.14.249.96/32",
		"117.74.0.0/32",
		"117.128.0.0/32",
		"117.224.230.112/32",
		"118.0.0.0/32",
		"118.148.216.0/32",
		"118.156.16.0/32",
		"118.159.176.0/32",
		"119.32.40.0/32",
		"119.71.98.32/32",
		"120.0.0.0/32",
		"120.39.145.80/32",
		"120.164.148.136/32",
		"121.46.155.8/32",
		"121.112.0.0/32",
		"121.118.72.0/32",
		"121.128.0.0/32",
		"122.0.0.0/32",
		"122.76.152.239/32",
		"122.166.192.60/32",
		"122.231.84.64/32",
		"123.131.244.0/32",
		"123.189.35.128/32",
		"123.198.32.0/32",
		"123.224.203.72/32",
		"124.0.0.0/32",
		"124.44.174.240/32",
		"124.46.176.0/32",
		"125.0.0.0/32",
		"125.141.128.0/32",
		"125.144.200.0/32",
		"125.189.224.0/32",
		"125.192.0.0/32",
		"125.216.113.108/32",
		"126.0.0.0/32",
		"126.152.160.0/32",
		"126.155.15.0/32",
		"126.160.0.0/32",
		"127.10.224.0/32",
		"127.108.0.0/32",
		"127.251.249.32/32",
		"128.0.0.0/32",
		"128.5.0.0/32",
		"128.5.164.192/32",
		"129.192.0.0/32",
		"130.0.0.0/32",
		"130.132.96.0/32",
		"130.240.0.0/32",
		"131.30.128.0/32",
		"131.48.128.0/32",
		"131.103.192.0/32",
		"131.192.0.0/32",
		"131.198.185.224/32",
		"131.225.74.80/32",
		"131.253.50.192/32",
		"132.43.224.0/32",
		"133.26.68.0/32",
		"133.32.0.0/32",
		"134.0.0.0/32",
		"134.133.32.0/32",
		"134.240.0.0/32",
		"135.51.70.198/32",
		"136.0.0.0/32",
		"136.17.22.78/32",
		"136.185.183.179/32",
		"137.0.0.0/32",
		"137.146.102.0/32",
		"137.173.55.224/32",
		"137.192.0.0/32",
		"137.255.75.16/32",
		"138.86.0.0/32",
		"139.0.0.0/32",
		"139.30.196.88/32",
		"139.120.0.0/32",
		"139.166.56.0/32",
		"140.0.0.0/32",
		"140.14.0.0/32",
		"140.16.192.0/32",
		"140.208.0.0/32",
		"141.36.16.0/32",
		"141.128.0.0/32",
		"142.0.0.0/32",
		"142.88.0.0/32",
		"142.224.0.0/32",
		"142.228.192.0/32",
		"143.21.52.102/32",
		"143.28.124.0/32",
		"143.41.208.0/32",
		"143.160.149.156/32",
		"144.0.0.0/32",
		"144.61.100.0/32",
		"144.128.0.0/32",
		"144.160.50.0/32",
		"144.192.132.108/32",
		"144.218.197.192/32",
		"145.128.0.0/32",
		"146.15.192.0/32",
		"146.144.93.128/32",
		"146.160.0.0/32",
		"146.203.0.0/32",
		"146.209.249.248/32",
		"147.250.248.231/32",
		"148.94.56.0/32",
		"148.134.228.0/32",
		"150.27.135.250/32",
		"150.50.143.192/32",
		"150.169.88.0/32",
		"151.97.8.250/32",
		"151.192.0.0/32",
		"152.0.0.0/32",
		"153.139.140.0/32",
		"154.0.0.0/32",
		"154.14.40.240/32",
		"154.97.46.72/32",
		"154.116.0.0/32",
		"154.149.204.73/32",
		"156.108.245.72/32",
		"156.165.245.128/32",
		"157.221.0.128/32",
		"158.128.0.0/32",
		"158.188.0.0/32",
		"159.13.216.0/32",
		"159.73.109.0/32",
		"159.174.74.0/32",
		"159.225.224.0/32",
		"160.0.0.0/32",
		"160.107.64.0/32",
		"160.156.160.128/32",
		"160.234.0.0/32",
		"161.8.0.0/32",
		"161.59.249.64/32",
		"161.64.0.0/32",
		"161.73.22.224/32",
		"161.192.0.0/32",
		"162.0.0.0/32",
		"162.54.128.0/32",
		"162.95.0.0/32",
		"162.105.88.0/32",
		"162.227.217.0/32",
		"162.249.0.0/32",
		"164.119.0.0/32",
		"164.232.0.0/32",
		"165.32.0.0/32",
		"165.140.55.0/32",
		"165.179.58.64/32",
		"165.205.139.128/32",
		"165.208.224.0/32",
		"166.45.0.0/32",
		"166.171.237.32/32",
		"166.220.94.73/32",
		"167.18.0.0/32",
		"167.64.0.0/32",
		"167.128.0.0/32",
		"167.143.6.96/32",
		"167.147.98.128/32",
		"168.0.0.0/32",
		"168.103.116.252/32",
		"168.128.0.0/32",
		"169.0.44.152/32",
		"169.101.25.0/32",
		"169.169.25.192/32",
		"170.0.0.0/32",
		"170.124.209.130/32",
		"170.131.192.0/32",
		"171.0.0.0/32",
		"171.52.0.0/32",
		"171.146.185.180/32",
		"172.0.0.0/32",
		"172.107.128.0/32",
		"173.0.160.0/32",
		"173.217.192.0/32",
		"174.101.112.0/32",
		"174.131.200.0/32",
		"174.176.0.0/32",
		"174.182.184.0/32",
		"175.0.0.0/32",
		"175.71.167.0/32",
		"175.179.110.128/32",
		"176.0.0.0/32",
		"176.78.157.0/32",
		"176.163.108.64/32",
		"176.199.168.0/32",
		"176.213.33.176/32",
		"176.253.128.0/32",
		"177.57.64.216/32",
		"177.77.238.160/32",
		"178.0.0.0/32",
		"178.66.0.0/32",
		"178.82.173.80/32",
		"178.95.160.14/32",
		"179.80.107.64/32",
		"179.87.64.0/32",
		"180.0.0.0/32",
		"180.42.0.0/32",
		"180.57.204.0/32",
		"180.88.157.64/32",
		"181.69.64.0/32",
		"181.246.72.0/32",
		"182.241.0.0/32",
		"183.13.112.0/32",
		"183.46.129.180/32",
		"183.160.255.0/32",
		"184.0.0.0/32",
		"186.23.83.128/32",
		"186.218.138.0/32",
		"186.224.64.0/32",
		"186.230.64.0/32",
		"187.0.0.0/32",
		"187.228.0.0/32",
		"188.0.0.0/32",
		"188.43.109.176/32",
		"188.64.0.0/32",
		"188.156.0.0/32",
		"188.208.234.0/32",
		"189.210.80.0/32",
		"190.56.0.0/32",
		"191.0.0.0/32",
		"191.81.148.0/32",
		"191.206.224.0/32",
		"191.231.128.0/32",
		"192.0.0.0/32",
		"192.44.224.0/32",
		"192.84.0.0/32",
		"193.34.48.96/32",
		"193.139.34.192/32",
		"193.144.209.16/32",
		"193.170.120.0/32",
		"194.0.0.0/32",
		"194.0.59.248/32",
		"194.15.0.0/32",
		"194.192.0.0/32",
		"195.0.0.0/32",
		"195.8.0.0/32",
		"195.212.0.0/32",
		"195.224.0.0/32",
		"196.0.0.0/32",
		"196.152.176.0/32",
		"196.192.0.0/32",
		"197.0.0.0/32",
		"197.141.48.0/32",
		"198.70.64.0/32",
		"199.0.0.0/32",
		"199.37.154.0/32",
		"199.84.63.224/32",
		"199.112.211.176/32",
		"199.136.239.48/32",
		"199.160.0.0/32",
		"200.0.0.0/32",
		"200.71.168.198/32",
		"200.80.0.0/32",
		"201.80.0.0/32",
		"201.86.0.0/32",
		"201.144.0.0/32",
		"201.156.0.0/32",
		"202.10.114.128/32",
		"202.14.206.0/32",
		"202.47.204.0/32",
		"202.103.46.176/32",
		"202.166.0.0/32",
		"202.198.200.128/32",
		"203.0.0.0/32",
		"203.16.0.0/32",
		"203.105.37.0/32",
		"203.147.0.0/32",
		"203.160.0.0/32",
		"204.242.35.208/32",
		"205.0.0.0/32",
		"205.6.100.0/32",
		"205.15.192.0/32",
		"205.24.0.0/32",
		"205.128.0.0/32",
		"206.14.102.72/32",
		"206.117.4.0/32",
		"207.51.250.240/32",
		"207.79.134.230/32",
		"207.96.0.0/32",
		"207.224.0.0/32",
		"208.0.0.0/32",
		"208.128.0.0/32",
		"208.204.64.0/32",
		"209.40.40.0/32",
		"209.115.252.128/32",
		"209.131.32.152/32",
		"210.0.0.0/32",
		"211.85.144.0/32",
		"212.0.0.0/32",
		"212.138.128.0/32",
		"212.186.0.0/32",
		"212.241.222.224/32",
		"213.55.0.0/32",
		"213.165.217.96/32",
		"213.236.116.0/32",
		"213.248.0.0/32",
		"214.0.0.0/32",
		"214.29.8.0/32",
		"215.53.138.0/32",
		"215.208.0.0/32",
		"216.0.0.0/32",
		"216.91.128.80/32",
		"216.124.160.0/32",
		"216.209.142.36/32",
		"216.230.104.0/32",
		"217.62.104.0/32",
		"218.0.0.0/32",
		"218.136.0.0/32",
		"219.3.107.136/32",
		"219.148.96.0/32",
		"219.167.176.240/32",
		"220.175.32.0/32",
		"221.79.92.0/32",
		"222.32.0.0/32",
		"222.192.0.0/32",
		"223.37.144.0/32",
		"223.62.13.96/32",
		"223.101.0.0/32",
		"223.128.0.0/32",
		"223.148.0.0/32",
		"223.248.0.0/32",
		"224.0.0.0/32",
		"224.84.28.20/32",
		"224.246.153.0/32",
		"225.24.239.224/32",
		"225.165.104.0/32",
		"226.124.131.110/32",
		"227.31.172.182/32",
		"227.32.0.0/32",
		"227.148.128.0/32",
		"227.251.0.0/32",
		"228.0.0.0/32",
		"228.66.58.0/32",
		"228.128.0.0/32",
		"228.185.204.128/32",
		"228.192.0.0/32",
		"229.32.0.0/32",
		"229.146.92.0/32",
		"229.214.0.0/32",
		"230.128.0.0/32",
		"230.136.0.0/32",
		"230.165.112.128/32",
		"230.199.0.0/32",
		"231.27.128.0/32",
		"231.205.133.231/32",
		"232.0.0.0/32",
		"232.76.0.0/32",
		"232.226.56.0/32",
		"232.241.0.0/32",
		"233.96.0.0/32",
		"233.224.101.0/32",
		"234.8.0.0/32",
		"235.8.64.0/32",
		"235.132.0.0/32",
		"236.0.0.0/32",
		"236.60.136.0/32",
		"236.96.0.0/32",
		"236.112.0.0/32",
		"236.216.134.0/32",
		"237.14.208.0/32",
		"237.116.0.0/32",
		"237.242.128.0/32",
		"237.255.0.0/32",
		"238.113.192.0/32",
		"238.191.174.104/32",
		"239.81.66.8/32",
		"239.180.0.0/32",
		"239.222.160.0/32",
		"240.0.0.0/32",
		"240.32.0.0/32",
		"240.148.155.192/32",
		"241.99.177.24/32",
		"241.119.196.0/32",
		"241.128.0.0/32",
		"241.168.129.104/32",
		"241.193.81.94/32",
		"241.202.226.164/32",
		"242.88.54.0/32",
		"242.252.208.0/32",
		"243.56.64.232/32",
		"243.86.32.0/32",
		"243.154.178.0/32",
		"244.0.0.0/32",
		"244.23.72.0/32",
		"244.123.192.0/32",
		"244.128.0.0/32",
		"244.182.244.127/32",
		"244.208.224.0/32",
		"245.17.28.0/32",
		"245.128.0.0/32",
		"245.134.218.224/32",
		"245.221.142.0/32",
		"246.17.96.0/32",
		"246.112.96.0/32",
		"247.0.0.0/32",
		"247.195.117.248/32",
		"247.211.44.0/32",
		"247.232.0.0/32",
		"248.0.0.0/32",
		"248.55.128.0/32",
		"248.107.120.0/32",
		"248.188.144.0/32",
		"248.220.53.26/32",
		"249.47.64.0/32",
		"249.168.16.0/32",
		"249.232.0.0/32",
		"249.234.3.216/32",
		"250.0.0.0/32",
		"251.79.224.0/32",
		"251.232.0.0/32",
		"251.254.4.0/32",
		"252.0.0.0/32",
		"252.3.72.100/32",
		"252.36.84.0/32",
		"252.170.208.0/32",
		"253.38.159.208/32",
		"253.192.0.0/32",
		"253.219.146.223/32",
		"253.224.0.0/32",
		"254.126.30.128/32",
		"254.150.63.160/32",
		"254.154.0.0/32",
		"254.188.0.0/32",
		"255.143.14.210/32",
		"255.250.0.0/32",
	}

	testPrefixesV6 = []string{
		"::/1",
		"::/2",
		"::/4",
		"1c:41b4:174b:a7da:d371:2720:3c00:0/102",
		"8c:f2eb:9c3e:955b:bcd5:38de:79e4:0/111",
		"10f:7d15:3785:b411:f47a:1f99::/97",
		"12b:548f:ff61:c21c:3f22:7e29:2de:6860/124",
		"1a4:4786:139e:fcca::/64",
		"1c0:5bdb:5178:e712:a75d:817a:f2a9:8000/113",
		"1f5:a829:b578:69cd:c4c0:8f3b:4ad1:1800/119",
		"207::/17",
		"232:2a1f:7e00::/40",
		"255:7e5e:88a0:1750:200::/72",
		"27a:4f78::/29",
		"2fc:5d6d:2680::/44",
		"461:a395:c367:6adb:6d18:9085:53f:c000/114",
		"549:fda4:9272:c4a7:2228:bdf7:b9c0:0/106",
		"57e:74d4:b80f:63d4:34aa:e1ba:b400:0/102",
		"5b0:4e9d:d418:261c:53b9:9800::/88",
		"67c::/15",
		"684:8000::/17",
		"68a:405c:84d1:213a:fae0::/75",
		"742:c817:9c30::/44",
		"7d3:873c:3baf:8e82:bf00::/72",
		"7da:7000::/21",
		"800::/6",
		"863:4400::/25",
		"872:116c:50cc:1925:6000::/68",
		"89c:b420::/28",
		"8da::/15",
		"934:f9f:30d4:33d9:b191:1b06:963e:0/112",
		"944:9000::/21",
		"959:e40f:d000::/36",
		"9df:5419:bf25:b898:3400::/72",
		"a8a:6b61:d7a6:3938:5240:5d20:52dc:7dec/126",
		"acd:f85a:35a0:bdd8:fa5e:1400::/87",
		"aec:d658:36a3:9189:b800::/73",
		"aee:acd:2600::/42",
		"b76:6c9d:b600::/40",
		"b7f:bfbc:afd9:15bb:7205:80d5:23e8:0/109",
		"bca:82a4:2dd9:6e5a:63a5:bd6e:395a:a400/118",
		"be5:49a5:f08e:7ce0::/59",
		"c0a:21cd:8e0b:c396:cd29:b291:e580:0/105",
		"c4b:cc00::/22",
		"c59:df84:91ee:fcd9:fd94::/80",
		"c77:711:d39c:38e4:1840:33f8:eac8:0/109",
		"c79:6497:6f26:9a28:2e72:a2fa:3a66:400/118",
		"ced:8480::/28",
		"d0f:39a8::/29",
		"d4d:b000::/20",
		"d89:96d8::/30",
		"dbe:aa0f:e2f8:c1fe:9f5c:4b85:9af7:c000/114",
		"e00::/7",
		"ed9:eb8e:5910::/45",
		"edd:88eb:2d90:db00::/56",
		"f04:2071:fefe:6b89:6e78:9464:8568:0/109",
		"f46:a39a:335e:8aab:5700:b758:ba57:6790/126",
		"fc4:18f1:dcd5:bfad:f200::/72",
		"1000::/5",
		"1039:70a3:29ec:300c:285f:9a00::/89",
		"1056:265d:7000::/36",
		"1080:4ec0::/26",
		"10c0:8f97:52d1:c49c::/62",
		"10e8:d640::/28",
		"1100::/10",
		"1137:9066:825c:65f6:4000::/66",
		"115f:3576:5152:10e7:c0fe:e5f4:1378:0/109",
		"11d9:1a46:4c60:305e:fd6c:1fd4:5c05:2800/119",
		"11f2:5836:2a4d:d934:c219:a5c5:811:b400/120",
		"124e:2fe8::/29",
		"12db:caa6:b0ee:af46:5c49::/80",
		"1343:26f2:b136:9feb:2f42:5e4a:699a:7000/117",
		"13e9:91c:41fe:123b:da41:664b:6bf0:0/108",
		"1408:cd5:2227:8b50:81eb:26d4:ff1b:c000/115",
		"141c:96f3:49db:4ccd:7780::/73",
		"1448:c1cb:2ccf:3d4a:6a7b:fa00::/87",
		"1448:d9da:10d9:4000::/51",
		"1449:bcca:c33a:699e::/66",
		"14de:3650::/28",
		"1518::/13",
		"15e1:8f40:99ad:b897::/69",
		"1611:400::/22",
		"1673:d5c0:148e:8c::/62",
		"16e2:88e:e338:1a1e:b029:9ed4::/94",
		"16e5:4c9c::/31",
		"170c:104e:f1eb:7bdf:2df2::/79",
		"1740::/11",
		"1757:f771:e600::/40",
		"1763:9a5a:fc14:c200::/55",
		"178d:b07b:c443:1bb4:ff5c:26d0::/92",
		"1819:eb6e:57ef:bc5:5bb1:b300::/88",
		"18a7:587d:4066:a26c:db71:2e3f:3586:c400/121",
		"18e0:9cbf:d99d:f538:25df:8000::/82",
		"190b:581f:eda5:18e2:338f:8c00::/86",
		"1931:4000::/18",
		"195b:931:5af0:8f8f::/64",
		"1a00::/7",
		"1a00::/10",
		"1a4c:99ae:5dae:b77e:9757:1f55:a800:0/101",
		"1aa3:5b74:81e1:366a:3966:1b95:e000:0/107",
		"1ae2:4843:14d1:3577:c760:915e:df94:ac00/118",
		"1b2a:dff7::/34",
		"1b60:6d71:c46e:b51d:c471:2209:22f:3070/125",
		"1c60::/11",
		"1c7b:c833:6e65:3a3a:3645:b2c1:5301:0/113",
		"1cc4:e6ec:b70e:644:a039:4aac:ec00:0/102",
		"1d62:aad7:bd1e:ae1f:d984:d200::/87",
		"1dd9:6e26:4d35:114c:1ce1:3037:be10:0/109",
		"1dda:5200::/25",
		"1e5d::/16",
		"1e73:25b8::/30",
		"1ebf:8677:1fce:cd6e:5cb5:9157:8480:0/105",
		"1ee9:f767:6678:e7aa:fbfe:f564:89f9:a6c0/123",
		"1f53:a514:a941:f58d:53a4:6768:6ef0:b800/117",
		"1fa4:9c00::/22",
		"2000::/3",
		"200c:16ba:aa7c:d182:73ff:40d6::/96",
		"200f:2870:2214:2a0::/59",
		"206d:b2ce:f9de:db43:1cea:fb83:1d64:2910/126",
		"2089:c93c:7984:4140:4118::/77",
		"20b0:dfce:c000::/36",
		"20de:cb0f::/35",
		"2199:4b45:cb18:8bde:7740::/74",
		"21e5:4fa0::/30",
		"22c8:2d4c:7333:3fd5:bc40::/75",
		"2311:9ea0:f2f0::/44",
		"233e:d0ed:edf2:1105:960d:b0e0:730:a000/116",
		"2368:c980:2800::/39",
		"23f8:204b:fd48:47fd:4325:34e0::/92",
		"241b:3ae4:1947:6c36:7912:fa0c::/95",
		"2450:faf0::/29",
		"2480:e055:4000::/35",
		"24ca:4f20::/27",
		"24f8:9ad0:1dd9:9820::/60",
		"256a:b3ac::/30",
		"25bf:fd28:e7cd:85e7::/64",
		"261d:28cd:70c8:e80e:e610::/76",
		"2658:48a1:718d:a1ca:12b0::/76",
		"2698:4b92:f674:304:58b6:5a34:fdc7:e32c/126",
		"26dc:d000::/20",
		"26ec:7ea0:d634:c228:dc05:800::/85",
		"2709:bd1d:b469:85d7:491:34b6:4000:0/99",
		"273a:c1e4::/30",
		"2757:99e5:50b6:d0b6:15b2:56de::/95",
		"27ee:b806:3f35:22b1:3679:cc00::/89",
		"2828:dfbf:93fa:f8e7:f40:491a::/96",
		"2842:5f6a:7477:db91:bfca:46b5:7d9c:0/114",
		"2844:7d5b:d5ae:b293:3c47:79f9:aa58:5a80/121",
		"28d7:c729:62ce:ecc2:c3ad:76c2:c79e:8000/113",
		"2913:52dc:2b7e:a05:c000::/67",
		"29cf:976b:4000::/34",
		"2a18:7700::/24",
		"2a53:b8eb:d184:4000::/50",
		"2a92:5238::/29",
		"2aff:3969:6146:452d:68c0::/74",
		"2b00::/11",
		"2b49:84a4:b8d:54db:59b1:3801:9800:0/101",
		"2b76:c5b9:c800::/38",
		"2bb6:2f03:5220:3542:7357:f0c8:b400:0/102",
		"2ca9:d842:508d:3480::/57",
		"2d56:f1a5:2d9d:2c3e:d9fd:e85a::/95",
		"2e63:eeb2:29ee:f2f8:625b:cc00::/88",
		"2ebf:a10:1f75:dfe6:b0d9:bf00::/88",
		"2efc:f0e7:cca8:47b4:93d2:4a2b:4000:0/98",
		"2f17:9197:1d37:f694:586:7b6f:db0c:0/111",
		"2f3a:45cb:3342:fa6d:1a93:9000::/84",
		"2f46:ba05:8000::/34",
		"2fd6:97ff:bec0::/42",
		"3000::/5",
		"3000::/6",
		"300f:ad2c:5d1:418c:2d33:29a3:2c00:0/102",
		"3021:72b6:e2e9:a019::/64",
		"3038:1aa2:7bd5:4d26:33f3:974:cbf:4600/121",
		"3046:bd8d::/33",
		"304c:db7:8262:1c97:5b59:8f86::/97",
		"30c3:4b15:6090:1e29:6afb:2193:4e47:b450/125",
		"30c5:7d40:9baf:5233:8b54:60fb:6aa0:0/108",
		"30ed::/17",
		"3143:dfa9:9fb:7000::/52",
		"315e:103f::/36",
		"31d1:227d:1ffe:9419:a260::/75",
		"31e7:594a:1820::/43",
		"3218:d92f:72e:14aa:feb0:2000::/84",
		"328e:d74d:a785:800::/53",
		"32d5:5210:41bc:8be9:9447:4a77:64ff:4780/121",
		"32e1:3adb:9740:4000::/50",
		"32eb:7639:89a3:e534:361b:9474::/94",
		"32ff:b44c:4ba0::/43",
		"3348:e7a8:3237:850::/62",
		"338d:f5:1948:4d62:ff81:d957:3305:0/112",
		"33ce:6ac8:4d62:4c11:7958:abf:def9:8e00/122",
		"342d:505e:c67a:abc0:91c8::/77",
		"349e:8e6b:4fff:b9f2:c32a:a41d:45a8:0/109",
		"34aa:d91e:9bf0::/45",
		"34ba:d400::/22",
		"34f7:2e40::/27",
		"351e:b62f:4c00::/38",
		"35f7:b117:bb44:8000::/49",
		"3600::/7",
		"364c:b5db:5e19:a34e:b800::/69",
		"3660::/12",
		"36ad:b946:cd49:eaea:fdd6:fa33:91b5:c000/116",
		"3708:d63d:6822:1442:7569:1e42:cbdf:2340/123",
		"375f:863d::/32",
		"379c:3ae8:2000::/37",
		"3898::/14",
		"38de:8439:82b:800::/53",
		"3904:1eb8:6a79:e000::/51",
		"3941:3b06:1aff:882:1ead:b581:ba4e:180/121",
		"39ee:49c2:2554:adf4:8000::/66",
		"3a4b:fceb:81e2:3579:d256:cb16::/95",
		"3ae9:783f:93c2:533::/64",
		"3af6:65e8:6976:2e87:398c:3bd0::/94",
		"3b84:f613:8000::/33",
		"3bcf:6d48:17a7:2fc7:614a:4210:6400:0/102",
		"3be0:723f:aadc:4059:4aa8::/78",
		"3c00::/7",
		"3c1e:c313:c000::/34",
		"3c58:ec46:5699:3c96:f631:a4ea:8082:fdb0/126",
		"3c7a:9e9c:4ec:53b4:205a:4689:f2b8:0/111",
		"3cb1::/19",
		"3d9b:9a77:671a:9dc1:e9e0:6596:372b:2d00/120",
		"3da7:5ce0::/27",
		"3de0::/11",
		"3dea:2841:c1dc:3f10:5e1e:b250::/93",
		"3e02:8f0c:5000::/37",
		"3ec4::/14",
		"3ee1:8a9c:a2c0:4260::/59",
		"3eec:fdbc:6db3:e37:9000::/72",
		"3fba:2470:4399:a363:353c:9e29:9c52:6e70/126",
		"3fd5:8a10::/28",
		"3ff3:b1ab:8e4::/46",
		"4000::/2",
		"4000::/7",
		"4030::/13",
		"403a:4eee:5b07:de19:980a:b742:1d2a:b000/118",
		"406a:f5a6:8cb2:2076:30e4:c25:9c63:7b88/125",
		"40da:a280:4b1a:a313:f1d7:3d80::/92",
		"41c9:9b43:b864:a80e:5000::/69",
		"41d5:5a02:f11::/49",
		"429c:34ad:ec84:1981:caee:1800::/85",
		"42bd:c52d:f440:4638:f0d6:1d93:2f40:5000/116",
		"434d:6f67:13ec:3e60::/59",
		"4352:86c4:c000::/34",
		"439a:bb31:b000::/36",
		"43c0:9c8a:89cc:1853:aaa9:bd42:c414:f000/117",
		"43f4:fa7f:d3b1:4659:7b30::/76",
		"43fe:f202:bf3e:f890::/60",
		"4400::/8",
		"4471:8218:595c:9582:4242:8800::/85",
		"4488:9362:3141:f341:2dca:a1d6::/97",
		"452e:8ddd:c7c5:2273:2567:6f46:a04c:0/112",
		"458f:facf:fcd2::/47",
		"46b1:359e:9630:3447:4268:1030::/93",
		"46c3:34c0::/27",
		"471a::/16",
		"4731::/16",
		"478e:a975:fafb:ddee:6956::/79",
		"4791:1ac0:85cb:67e3:d258::/77",
		"47a4:4965:d0e:ea20:b686:c6a0::/91",
		"4800::/5",
		"482d:bc0d:47aa::/47",
		"486e:5135:76db:7378:14b3:eb38:7000:0/100",
		"4873:6355:de40:977:dda4::/80",
		"48b4:d53f:71a8::/45",
		"48c6:8188:d64d:92d9:2000::/67",
		"4948:844a:4c08:212b:400::/72",
		"4956:cb18:fdd8::/45",
		"49d4:7fcd:4283:936b:c32:7cb0::/96",
		"4a0d:f4ba:a53a:341:8914::/78",
		"4a11:540a:3a6a::/51",
		"4b00::/8",
		"4b3e:10be:ddb0::/44",
		"4b56:783c:cb94:539b:3c81:3d34:6b50:0/108",
		"4bcb::/18",
		"4c22:b029:36d4:ff9b:71d8::/77",
		"4c48:3195:4ab5:4000::/51",
		"4c73:90eb:b045:9cd3:2586:ca7e:c292:8844/126",
		"4c95:829b:28ac:6802:d3d7:4000::/82",
		"4cb2:1f5d:5380::/41",
		"4cf9:89aa:a0cd:dd00::/58",
		"4d3e:bfaf:b47a:a91d:c000::/66",
		"4d43:4fdf:df91:48e8:e000::/67",
		"4d58:dc86:83d1:1ab7:7bf3:bd71:c300:0/104",
		"4d80::/9",
		"4dba:7b0f:9da1:d7eb:a25e:cb0::/92",
		"4dc4:5c36:be9e:7e00::/55",
		"4dd0:205f:c000::/34",
		"4dd3:a596:2b00:cb9f:2edd:beb3:1a00:0/103",
		"4e80::/9",
		"4ec7:3a3d::/32",
		"4f18:4b36:317e:2124:32c:9c40::/95",
		"4f7a:c49d:6542::/55",
		"4f9d:bfe3:53b9:5201:9537:70c9:7e06:4000/114",
		"4fae:3a4f:2fd4:2000::/54",
		"4fd2:69fd:8e5f:475:941e:52a0::/92",
		"5000::/4",
		"5000::/5",
		"5042:8478:aa16:8cc0::/62",
		"5057:1f18:21c:fcee:881e::/79",
		"507f:a3e1:7d64:6b40:1b0e:e5d0::/93",
		"5095:2000::/20",
		"50d0:4da:1908:58f8:8258::/79",
		"515e:c7ac:b999:14b0::/62",
		"5166:eacd:4335:740f:27b4:eaa:eb94:0/110",
		"5211:2dcd:8fb7:71c0:4ff4:46e0:2480:0/108",
		"5225:fcd6:90e:c04f:b82a:810c:8000:0/99",
		"5280:4793:6c9c:64b7:80e0:f45e:4240:0/106",
		"5283:7899:f25a:928f:e088::/77",
		"52e7:6038:f4a0:9720::/60",
		"52f9:7cc2:c90d:5794:c806:7bca::/98",
		"5395:4805:3eff:c800::/54",
		"53a0:143d:f80f:189f:1c86::/80",
		"53b7:a0ff:7065:8b94:97d7:a13:3c96:7300/120",
		"53d2:6e00:2af2:ae8f:4560:58c5:6d00:0/105",
		"54b6:d8e3:14b0:255d:a448:6000::/83",
		"54db:d48f:1bb5:e824:9ae6:2c9c:e3b2:8000/114",
		"556e::/16",
		"55e0:5af4:e100::/40",
		"5600::/7",
		"560c:894:cff1:9000::/52",
		"560d:cdeb:c5db:8d2c:7daf:26e8:b843:3648/126",
		"562e:64d9:3744:5517:fca2:256:85c0:0/107",
		"56a1:122a:2bb0:97ec::/62",
		"56c9:e3ca:b280::/41",
		"574a:a917:5073:1573:3040::/74",
		"57e3:fcf7:d04f:fe0d:1180::/75",
		"57eb:d591:ece:20b8::/62",
		"5800::/7",
		"5800::/13",
		"5802:3c06:1d0c:639f:f400::/70",
		"58b4:fa03:f0b3:3651:d880::/76",
		"5930:a334:c000::/34",
		"594e:ee00::/23",
		"59c1:ccc9:cf37:1825:64f9:bb38:623e:6540/125",
		"59d0::/13",
		"5a00::/10",
		"5a10:d822:46a:4651:df8e:bc2a:4991:e940/122",
		"5a29:abd5:5517:2153:971a:71d7:2218:c100/120",
		"5a35:a9cd:d96e:c50d:9330:b81c:9234:5000/119",
		"5b0a:e880::/25",
		"5bae:597c::/30",
		"5bfb:4000::/18",
		"5c1b:1131:c3fc:e48c::/62",
		"5c44:8000::/19",
		"5c80::/16",
		"5c85:9148:e75d:3f5b:a9be:a600::/87",
		"5cd5:d85d:5834:b9c5:8ad0::/76",
		"5d00::/9",
		"5d99:35ea:312d:7d41::/64",
		"5dee:f48e:e65b:1cda:ae23:2f80::/90",
		"5e1e:3781:f8a2:2000::/51",
		"5e1e:ecbf:8108:5c33:e19a:3299:d000:0/101",
		"5e90:e177:e09:4fe8:c4e8:c000::/83",
		"5e99:ad40::/26",
		"5ee2:deba:a858:bf74:9a5b::/81",
		"5efe:5721:4800::/37",
		"5f55:f554:5a99:2a63:ca80:503:808a:9520/125",
		"5f62:1185:830e:5afa:c000::/67",
		"5f77:30e2:61a0::/43",
		"5fab:9c3e:e400::/42",
		"6000::/5",
		"6002:6e36:eb00::/40",
		"600c:b199:c0d9:9e9f:5ea4:a388::/93",
		"6039:908:b802:bdfc:5494:2c28::/93",
		"60b4:ce52:3500::/43",
		"60cf:d1d3:5852:98af:1b18:7840::/90",
		"60e4:756f:5b62:bb85:edc::/80",
		"6111:4b3a:18b9:6c84:bc17:cc3b:2c00:0/104",
		"6139:353a:c0d5:f7aa:6640::/75",
		"6202:3c2d:1218:e800::/58",
		"6218::/13",
		"6313:883c:e21c:b812:b806:22ab:a8ff:8400/119",
		"6319:6869:b8b5:df4b:804:c72d:2720:0/107",
		"638b:328a:d100::/40",
		"63b6:15d0:2400::/42",
		"63fd:9f78:d1a2::/50",
		"640a:a72:75a2:df5:8fdc::/79",
		"6431:566b:7e27:af9:2636:24f:fc80:0/105",
		"645a:ca1e:9f46:7394:3fd5:6600::/88",
		"6466:6da1:52d7::/48",
		"6488:5184:a598:8100::/58",
		"6515:7426:e50e:c28b:f472::/79",
		"6544:5140:7e01:4d90:4000::/67",
		"6555:84aa:5403:510d:3ab:7fc0::/97",
		"659b:37d8:e321:bc52:f180::/73",
		"659c:de27:28bb:7eb2:1000::/69",
		"65c8:fdac:27eb:e846:b1d0:61cb:58af:bd00/122",
		"65d8:501:7912:7841:7613:2bba:517e:a000/115",
		"669f:37:63b0:3a00::/55",
		"66ce:c957:5956::/48",
		"672e:c6c1:dc1d:5b57:68c4:73ab:6241:be00/119",
		"673d:2000::/20",
		"6742:9574:f27d:2ca7:b318:df2a:5a6f:6800/117",
		"6756:a9e0:d928:4a24:ea81:fdd0:811e:c1ce/128",
		"6800::/6",
		"6892:ec55:bc1d:3502:c5a2:b460::/91",
		"6904:d8d2:8b6c:407f:b93f:9000::/84",
		"690a:9285:ab20::/43",
		"69c2:ed1b:41fe:9960:af18:5314::/95",
		"6a00::/7",
		"6a00::/9",
		"6a28:5c3f:a559:676e:6e06:e900::/90",
		"6a57:f597:2161:c03f:8e47:e7e0::/91",
		"6a7c::/15",
		"6aa7:aaf5:ad32:5d0:5d4e:1800::/85",
		"6ac7:f45d:4791::/49",
		"6b87:5800::/21",
		"6b95:45a:1de::/47",
		"6be7:4b3c:489a:5942:1b21:5f23:c087:4000/115",
		"6bee:f06:10a5:231f:c800::/70",
		"6c2d:a118:5b07:f353:9cdf:4000::/82",
		"6ce1:73a1:297e:4000::/51",
		"6cf6:3b3:2068:393c:96f6:fc7:a500:0/106",
		"6d00::/8",
		"6d7a:cf37:641:dfb5:c000::/67",
		"6d82:eab9:5cc3:fc92:2416:e221:7e00:0/105",
		"6e66:1e92:7598:5f5:3f96:6fad:c500:0/105",
		"6e71:6d05:2000::/35",
		"6e72:97d6:1ecb:5387:2de9:3040::/90",
		"6e80::/9",
		"6e92:befa:125c:dae3:ce4:9679:8ef4:0/110",
		"6eb3:3915:4602:315f:b31e:7880::/89",
		"6ec6:1094:1f9c::/47",
		"6ed6:b327:b94e:39ee:17e2:51d9:8000:0/97",
		"6f3c:be:5cfa:8af8:f4c8:47a8:c600:0/103",
		"6fd5:8a3e:7368:d56e:284e:8efe:acb5:9c00/118",
		"7015:9000::/20",
		"702e:a447:b53f:3c0::/58",
		"705c:7000::/20",
		"7075:83c9:fddb:92df:2257:58d9:9f18:c540/128",
		"70f5:ad7:1be1:9d12:72ca:f50e:38fe:b000/116",
		"710b:5572:b348:b800::/55",
		"710e:e23c::/33",
		"7114:fcdd:ea00::/40",
		"717c:c490:805b:7b5c:afae:6000::/83",
		"7196:5a85:3bbe:ccbf:7c40::/74",
		"7266:3012:3bd3:539:7f54:f380::/89",
		"72a9:ae75:4e36:7aa4:2daa:23c2::/95",
		"72e5:723:c000::/35",
		"7349:a000::/23",
		"7368:88b4:27bc:e82c:a482:3cc7:1f61:0/112",
		"7400::/6",
		"742a:afda:5c0:77dd::/64",
		"7433:3a1d:b029:9ef3:c03d:d952:92ec:0/110",
		"7472:5856:90a3:dc1f:12e1:3186:c940:0/106",
		"748d:96a5:433c:8978:7cf4:9670:5138:0/111",
		"749d:e23:4a28:f898:e000::/68",
		"757e:7d60:f1c1:515e:207:7487::/96",
		"75ac:4164:36dc:488e:e909:bc80::/90",
		"75e0:e672:fb60:28e8::/62",
		"761c:ece4:92ec:cb96:4640:b480::/93",
		"7689:dc7a:7486:6ea3:deb0::/76",
		"7695:3d80:5706:88ee:a0b3:c7b7:a800:0/101",
		"7695:e370::/30",
		"769f:b0f4:fb4e:b000::/52",
		"76a7:80ea:967c:d710:7b03:7b32:d300:0/105",
		"76e6:3a0f:7b2a:414:44c0::/75",
		"7730:c20f:10da:a99e:ae68::/80",
		"773e:354d:b2aa:1877:b852:de9:f2d0:4000/114",
		"7847:3856:17f0:8e18:ad6:1fb0:ac86:0/116",
		"78ac:4607:6870:b5f1:3666:c0ef:99a0:0/111",
		"78d7:cc0f:4db5:b769:1f9c:d8e9:c518:2600/123",
		"78f0::/12",
		"78f6:7af1:c6c2:e46a:fb29:a4c2:776a:0/111",
		"7909:10b2:6908:419e:5ecf:c841:c91:3640/122",
		"794f:26c5:ac8a:b221:c7f8:a475:9ef4:7480/121",
		"7965:6da2:df40::/42",
		"7995:c5dc:9cbc:be5e:3af0::/78",
		"79ae:5bf:7c9a:40b8:4840::/74",
		"79d9:d070:d09:55d1:3404:3000::/88",
		"7a24::/15",
		"7a5b:c000::/19",
		"7aef:522a:5d2d:46b0:e813::/82",
		"7af1:950e:929d:89d3:b880::/75",
		"7b42:47ef:7dc5:5bc4:c3ba:3b9d:f8d9:4000/117",
		"7b46:36c9:195a:3f1c:ccc4:3c00::/88",
		"7b83:f51c:b2b0:8800::/55",
		"7bdd:8602::/31",
		"7c02:d500::/24",
		"7c2c:aef0:e08a:35ec::/62",
		"7ca9:1091:b8a8:b400::/56",
		"7cb6:7087:e30b:9037:961b:659:8000:0/97",
		"7cba:f609:31b2:eb38:229b:b4b6::/96",
		"7d03:d5e0:e54d:8d0d:6780::/77",
		"7dbd:e285:7548:ec00::/54",
		"7e58:16e9:a000::/41",
		"7e98:a2a9:434b:2000::/54",
		"7ec8:84a5::/33",
		"7f6e:ed4e:ab10:8a34:3a8a:4867:e680:0/105",
		"7fed:3ddd:c97f:404:6332:eea8::/96",
		"8000::/1",
		"8000::/3",
		"8010:d632:6b40:eabc:c6ef:deb0:90ba:d160/123",
		"8084:8a00::/23",
		"80a4:d742:2980::/42",
		"80f6:b135:8510:5e56:4296:3a5c::/95",
		"814b:4000::/19",
		"81b5:de63:d1ea:f0b0:8400::/73",
		"8200::/9",
		"8307:2000::/20",
		"830c:c4d4:8d29:774e:9f64:32b1:99d4:1548/126",
		"8340::/10",
		"83bd:3df4:782e:bd8a:dfd0:3593::/98",
		"8400::/6",
		"8480::/9",
		"84fa:e400::/24",
		"8501:1544:51fa:bf9b:7765:e754::/99",
		"8597:7706:a5b1:c53d:94c8:b5b4:c770:8c48/126",
		"8644::/16",
		"86de:50a8:5893:f400::/54",
		"86f3:7c32:8000::/37",
		"870f:13:2396:b360:90f9:404b:8bab:6f20/125",
		"8717:6604:8464:5988:8be0:724b:5000:0/101",
		"875d::/18",
		"8780::/9",
		"8801:412e:e5aa:bc54:7c39:5e9a:4acc:a000/115",
		"885c:39c6:741e:a000::/51",
		"8870:8d75:43a5:e698:536e:1ae6:fca5:2498/125",
		"8897:a974:4137:317:1338::/81",
		"88a1:480c:a9f7:21e3:831a:4800::/85",
		"88c0:20ae:dff1:9f1:ff99:f800::/85",
		"88cd:c4:e533:e9a3:b940::/74",
		"891b:7f70::/31",
		"893f:e5d7:4c1c:45c2:c000::/66",
		"8940:add1::/34",
		"895f:a687:7b71:ecfc:4454::/83",
		"8987:43d5:8000::/34",
		"89b5:ccae:4c14:e843:8a95:2d4c:f724:5800/117",
		"89c0:9a3e:6f24:1c57:b700::/72",
		"89d0:7f53:1e2a:68cc::/62",
		"89fc:3f00::/24",
		"8a2d:3599:43cc:de0a:a27d:e800::/87",
		"8a40::/10",
		"8aa7:5e35:cc00::/38",
		"8b05:561f:badb:6cb7:7b29:a7d3:2000:0/99",
		"8b90:434:d2e0:5cdd:6975:5a2e:5f79:1700/120",
		"8ba6:3bcd:8104:b000::/54",
		"8bb0::/14",
		"8bb0:8ac1:7345:2071:6d80:eb9b:56d1:94dc/126",
		"8bc0::/12",
		"8c02:7bed:9336:35c9:88f:ebb9:cbc:0/110",
		"8c8c:4694:a54a:f747:5bed:cf0c:bb40:0/106",
		"8c96:336:7488:b21c:3e48:2f2c:9560:0/107",
		"8ca6:8a54:5cf6:f5a8:2258:5200::/88",
		"8cba:f0e7:6992:2d27::/64",
		"8cdf:a466::/31",
		"8db2:56ef:e293:162e:b24e:4200::/87",
		"8dd7:358a:d70c:c6d5:a6f:5b10:da4f:9200/120",
		"8e08:dc27:3d00::/41",
		"8e0c:5916:8bdc:e338:415b:5298:4fd3:7580/123",
		"8e23:11c8:be00::/41",
		"8e41:302b::/32",
		"8e5c:7d7e:9580::/45",
		"8f57:42f0:12c8:d4bd:3a00::/73",
		"8f9e:8000::/19",
		"9000::/6",
		"903e:9273:a800::/37",
		"906d:4dd4:f34a:adfa:34de:4a54:8600:0/104",
		"90b1:66a2:2189:8f34:a5f:cc49:8661:e3a0/123",
		"90b2:b37e:a600::/42",
		"90b9:2d01:69a3:9144:8d05:e770:d3c6:b40/122",
		"90bf:cb93:29a3:975c:1749::/80",
		"90c8::/13",
		"90d4:5d78:f800::/43",
		"90ee:a800::/21",
		"913e:5c00::/22",
		"91a3:9040:f4b6:f47f:294b:4e8e:20f3:1127/128",
		"91e1::/16",
		"9284::/14",
		"9313:39e3:7bcd:83b5:9d41:cc3::/96",
		"9344:bc05:d7e4::/46",
		"93e1:d6e9:64bf:401c::/62",
		"93f9:2b19:e735:8a5f:3a00::/76",
		"940a:4b3a:d184:272:1dfd:fcf7:34d0:0/110",
		"9420:2280::/26",
		"9421:5595:a730:9433:be76:c00::/86",
		"945c::/16",
		"9460:c84b:d3da:dc65:8d57:c998:c7c0:e010/124",
		"94f9:2000::/19",
		"9531:bf44:1015:7b34::/62",
		"956b:400d:4860:4236:9c98:be32:39f4:ef50/126",
		"9585:1b62:d426:60b2:7534:166d:4f18:e960/123",
		"96cd:7d22:9a95:cc49::/64",
		"9713:3d2a:5501:3d40:5a1:b159:5737:5140/123",
		"9729:5b01:2363:4000::/51",
		"9732:94f9:4dec:4008:ff1b:471f:dcf:1000/117",
		"97bc:e000::/19",
		"97cc:312b:41a8:758c::/62",
		"97dd:b0c:5699:dd7f:4bf1:4000::/85",
		"9800::/6",
		"9801:f9d8:f395:306d:112a:6000::/83",
		"985a:7000::/25",
		"9876:415e:66df:8500::/57",
		"987e:21c1:e424:aa20::/59",
		"98cf:416d:866b:7086:203f:50d6::/95",
		"993b:6638:3c00::/38",
		"999c:7eb5:4000::/34",
		"99be:ab8d:7e16:8f37:14fb:5e00::/87",
		"99e6:5692:8e20::/43",
		"9a0b:b37b:107:586e:52f9:c400::/86",
		"9a61:d5b5:ba07:564a:2269:f4f2:ea99:1000/118",
		"9bc6:8d07:8904:adf5:626a:4a30:f800:0/101",
		"9be7:c1ac:ef8d:6328:b7d5:4c15:5e71:d060/125",
		"9c41:8a05:c000::/37",
		"9c80::/9",
		"9c8a:c572:ea50:c2a2:e6d:11b4:1608:3740/122",
		"9d0b:b4fb:dc00::/40",
		"9d20::/11",
		"9dac:9b58:2d23:176:a9ce::/80",
		"9dc8:ebd0:a630::/46",
		"9de4:658d:8f13:3cb4:11c0::/74",
		"9e50:3382:be14:186f:9cd8:f500::/89",
		"9ea2:ddbf:5913:6f30::/60",
		"9ebd:c24:f6a0::/43",
		"9ec7:9eb7:934a:3f26:3000::/69",
		"9f0d:db04:502d:a000::/54",
		"9f49:6d03:e9a0:9590::/60",
		"9f5a:bc6e:2b60:1dda:78ef:6398:c000:0/98",
		"9f76:1c5b:171a:80ba:ef5c:d8fc:be0d:5fc0/126",
		"9f8b:c000::/19",
		"9fa7:aefe:d486:8591:7000::/73",
		"9fb9:5e8c:ca59:9392:a700::/73",
		"a000::/3",
		"a000::/5",
		"a029:459b:25f3:526f:de6d:4240::/90",
		"a06b:464f:927d:7000::/52",
		"a0e7:309f:35b:88ab:c2b3:9be0:c00:0/103",
		"a13a:2647:5a00::/39",
		"a16e:33e3:7685:784d:92ca::/79",
		"a17a:f75b:c2d9:fd0:71a0::/75",
		"a1bb:48ee:fcc2:a300:9a79:cd4a:6ede:0/113",
		"a20b:b62f:5d63:89f4:ff00::/72",
		"a261:4d6f:beca:336a:b4a2:7551:ec00:0/102",
		"a2d0::/12",
		"a2d8:6a9d:b662:60c0::/58",
		"a2db:8869:3a9f::/48",
		"a317:7f7d:5d8::/45",
		"a3c5:b012:1e24:4dda:3200::/71",
		"a400::/6",
		"a404:9b18:362d:17:ec00::/70",
		"a480::/10",
		"a482:d27a:f30b:e3a9:126f:5b89:566a:3f60/123",
		"a491:a729:a0f2:40e6:8bd8:f78f:4600:0/103",
		"a505:8d5a:200e:6c03:a31e:455b:372e:0/111",
		"a567:4d4b:4200::/39",
		"a5a1:ffb5:22d5:54b4:679:6b83:f190:4760/124",
		"a5be:7a00::/23",
		"a674:a0a:89ef:52c0::/60",
		"a73b:e51:be49:3145:8d2:f5df:437f:8000/113",
		"a7be:ccfc:ba90:75b0:8c00::/71",
		"a84f:aa16:b389:1089:a6ff:857d:a3e4:4000/117",
		"a894:d9c2:f07b:cee7:2f6e::/79",
		"a8b6:2158:7cb3:ad0b:2546:a909:9576:4000/114",
		"a975:d9bb:52f5:a780::/57",
		"a99f:b4fe:a095:995b:f0ff:8af8:eef6:b000/116",
		"a9bd:f4cb:cd7b:204b:77b4:3486:67c:7c00/118",
		"a9db:4473:9aad:11df:d267:4110::/94",
		"aa30:a991:d787:c675:b200::/72",
		"aa33:8000::/17",
		"aa62:e400::/23",
		"aa80:d056:4cf2:a65:a00::/72",
		"aa85:3570:2d23:8a1b:1879:e9c2:dc4f:ba00/119",
		"aab4:ddb4::/32",
		"aae2:b8b6:ad64:d680::/57",
		"aafe:6561:974c:fc56:bd95:74ea:cec8:0/109",
		"ab92:b9b5:724b:8ae0::/62",
		"ac00::/7",
		"ac25:da40::/26",
		"ac5f:6dfa:ce7a:f194:5e09:a770:eb00:0/104",
		"ac79:d815:47f0:2daa:d138::/77",
		"aca2:4231:f987:6b26:3eae:8000::/83",
		"ace5:df27:e931:7c1f:f950::/77",
		"ae25:140f:bd02:b330::/64",
		"ae5b:bf80::/25",
		"af00::/8",
		"aff8:2f04:fc03:4864:64e3:6607:2840:4504/128",
		"b000:802f:8a9f:79e6:8000::/67",
		"b02a:464f:3d80::/41",
		"b092:a8d4:c46b:e00::/55",
		"b0a6:ccba:686c:7684:f70a:c000::/82",
		"b0c4:12b5:342c:1cdb:c280:c67b:8a30:40c0/122",
		"b0fd:a80b:4d44::/50",
		"b12a:ce2d:a93a:fa7a:a3a4:b925:76c1:1600/119",
		"b136:ce6f:a3ba:f5c4:e8f1:31a3:b618:0/112",
		"b1f7:d5ec:6ba8:e000::/51",
		"b200::/7",
		"b207:200f:e80c:1269:453a:1668::/93",
		"b217:3bf2:4d30:99b6:63d9::/80",
		"b251:97e8:1d8b:4866:a971:2c22:6ef0:8000/115",
		"b27a:908c:9400::/40",
		"b2fd:3e7a:c000::/34",
		"b352:cfe3:6f9b:a000::/51",
		"b436:d60:8164:59e1:2f7a:740c:8000:0/97",
		"b467:dada:bd9e:85f3:3282:9bed:1400:0/102",
		"b4ad:5ac8:8209:3298:e00::/75",
		"b4f3:580::/26",
		"b50d:9003:db97:40da:edcf:2896::/95",
		"b521:65c1:8676:9037:ad2b:34e6::/95",
		"b56a:eee5:fdde:63b1:33eb:b0f0::/92",
		"b5b2:389c:dad2:ac6a:c7b1:1712:56fd:d600/119",
		"b5c4:5f20:aaed:a313:b748::/77",
		"b5cb:6d8:6bb5:ce03:4ee0::/77",
		"b629:d9f1:7d9e:8fbc:3000::/68",
		"b6d1:106e:96ba:92e2:8000::/65",
		"b6d4:67a4:af63:e58d:3d28:d5d:93a0:0/107",
		"b723:6042:8154::/46",
		"b73b:a0cd:83d5:965d:618:cad9:2c00:0/103",
		"b762:a7eb:1692:2dd0:bf00::/73",
		"b76b:7b30:f4a0:1812::/65",
		"b77f:d800::/22",
		"b7ab:3641:fe3d:ea79:400c:749e:e2cd:4bdc/126",
		"b807:4bb:7b4d:7c03:d100::/72",
		"b83a:4800::/21",
		"b846:d27d:1cfe:85ec:4d5f:b600::/87",
		"b861:540d:7276:70cb:d900::/72",
		"b87c:987b:8c5a:e014:e000::/67",
		"b87c:b000::/20",
		"b902:f820::/30",
		"b9c3:c000::/19",
		"ba42:15f0:f5c4:eee6:6a59:b800::/87",
		"baa4:1a49:be4b:510b:e4b5:26b0::/92",
		"bc17:a9ef:b345:3200::/57",
		"bce8:ae24:5e80:5e2a:ce00::/72",
		"bd02:87a9:8589:69f3:7b06::/79",
		"bd18:bd71:f800::/37",
		"bd8a:3c10::/28",
		"bde4:f535:8000::/34",
		"be47:d9a0::/28",
		"be5d:db0e:fd7a:84af::/65",
		"bf20:852e:2800::/38",
		"bf57::/16",
		"bf6e:7e11:c000::/35",
		"bf84:706b:a53a:785e:3c6c:2800::/91",
		"bfbd:2c94:72c2:ba53:e1be::/82",
		"bfc9:51cc:3c88:58e::/64",
		"bfca:8000::/17",
		"bfd3:302c:b8d8:6b50:197a:5de2:3000:0/101",
		"bfdc:7af4:47ee:93d1:8c6f:b46a:5c00:0/102",
		"c000::/3",
		"c000::/5",
		"c023:6a00::/24",
		"c04b:1fb7:e000::/35",
		"c050:44b:a1fe:8de0::/60",
		"c0a0::/11",
		"c0a0:d285:d1:7832:faa1:4cc0::/91",
		"c122:3060::/32",
		"c129:3e00::/24",
		"c132:cb15:8efa:2d:a0b3::/84",
		"c153:c15b:7991:2b3f:a41c:9cb:10f4:0/110",
		"c173:8feb:b48e:aa7d:d25f:2680::/91",
		"c187:bbc3:b728:4045:207:b400::/89",
		"c221:56c2:4c87:4ca3:2d22:df30::/93",
		"c237:13a0:60ba:315:5c2f:5bae::/96",
		"c239:7fcf:22ca:dd11:fc60:8000::/81",
		"c280::/11",
		"c308:f155:20d4::/46",
		"c36c:6404:e63f:b72b:ac4a:95d3:2e84:0/114",
		"c36f:8000::/17",
		"c434:e101:e395:c548::/62",
		"c44a:bd45:7750:967e:ed64:700::/88",
		"c475:6e94:781b:88d6:4b:cffc:dddd:c340/122",
		"c477:7817:f36b:4130:d41c:cd1f:9c50:baa0/124",
		"c498:b076:14fe:4000::/55",
		"c508::/13",
		"c541:3757:5230:f36e:1a14::/79",
		"c567:6f94:fadf:aa7c:dcb0:c5a:a4bc:e000/115",
		"c58d:3209:48b2:8800::/53",
		"c590:9b26:8d7c::/46",
		"c5d3:c1d1:4766:9746:13e1:1fb7:c000:0/101",
		"c5d5:61a0:2817:8000::/49",
		"c5d6:4e9e:8053:21be:1400::/71",
		"c5de:56e5:df58:c69b:aec:e19e:9303:a680/121",
		"c69c:ae00::/23",
		"c739:53d6:46b1:4e1b:5129:f259:233b:b00/124",
		"c740:bbf7:35b5:d1ee:93bf:a2a0::/92",
		"c754::/14",
		"c791:3db1:7b5b:3793:7476:6930::/94",
		"c793:3c3a:a6dc:5e49:b1f1:e350:c079:4dc4/128",
		"c7c0::/12",
		"c7d5:f19e:9:c769:e820::/75",
		"c7e2:f240:c681:c26d:f4cf:a852:7793:2500/122",
		"c7f6:862f:f1ce:cda2:3d89:80c1:1000:0/100",
		"c7fa:f1e5:4417:eee7:9372:f980::/89",
		"c871:3d68:2840:39e9:5d48:9400::/86",
		"c8c7:305c:1000::/37",
		"c911:aa87:289c:bd2c:e47a::/79",
		"c921:a717:4000::/34",
		"c96c:33cd:e1fb:aec:792c:4600::/87",
		"ca00::/9",
		"ca0e:ce1f:9221:2580::/57",
		"ca51:246e:b6f8:6000::/52",
		"cb11:108:9e90::/44",
		"cb1d:1679:eeab:d400::/56",
		"cb3c:fe98::/29",
		"cb70:e7ac:7417:bf38:4f9a::/80",
		"cb78:1bbb:eabc::/46",
		"cba1:b973:f440::/45",
		"cbdb:185b:70ab:53ba:6928::/79",
		"cc00::/6",
		"cc5e:7d83:c651:a463:a6af:4578:6940:0/106",
		"ccb0:e420:d2e4:dddc:9485:6000::/86",
		"ccc7:be00::/23",
		"cd9a:9363:377f:b3a8:8b8e:e900::/89",
		"cdad:f89a:8600::/41",
		"cedd:f3d0:c4ec:3b4b:37ec:8000::/81",
		"cf03:b8c7:d76b:de35:3d8f:33c0::/90",
		"cf2c:5299:44b:1521:7b2:a2c2:13a0:0/107",
		"cf72:aae5:5c3a:a232:9e78:2492:c57c:5640/122",
		"cf73:147:1380::/43",
		"cfb8:e800::/21",
		"d000::/4",
		"d01b:6a22:b648:e604:aa88:c013:c000:0/101",
		"d054:4bec::/30",
		"d06f:1919:e104:87cd:e92d:9b66:8a33:0/114",
		"d0a0:f27b:4000::/35",
		"d172:b427:308c:22a0:8853:8000::/81",
		"d173:fc83:d916:ada0::/60",
		"d1b0::/12",
		"d1d9:6139:d23b:fec0:8c00::/71",
		"d200::/7",
		"d230:cced:f8ab:f8a4:1b00::/73",
		"d318:be4d:d4bb:66e4:bdb:c000::/82",
		"d31a:7035:4b0d:c3fd:da03:99b8::/95",
		"d396:d24a:3c6:d982:9167:7081:b2bc:8600/121",
		"d3e4:9771::/32",
		"d417:1a94:95df:7f8e:7dbe:7800:4f93:7e00/120",
		"d427:4496:16fa:a25c:8000::/67",
		"d43a:cf60:6535:8fc2:faed:cb00::/88",
		"d537:37da:310b:8000::/49",
		"d574:5a9a:bdc3:3b93:291a:1e61:4cc0:0/107",
		"d59a:5721:4000::/35",
		"d602:abd:6200::/39",
		"d604:fc81:5824:36ef:4c96:d100::/89",
		"d606:11c5:e868:ec8:b711:b8a8:fd3e:2480/121",
		"d6cb:f5d2:ec7d:fec0::/59",
		"d6cf:9495:f532:3720::/60",
		"d76b:ca11:c548:81ca:4000::/67",
		"d775:a5ac:fcfe:9550:71c0::/76",
		"d788:2592:277d:d76a:75d6:1087:79b4:29c0/122",
		"d7aa:5041:d682:2000::/51",
		"d7cf:c593:c000::/34",
		"d811:b1ab:e5bd:ee29:219f:2000::/85",
		"d86d:6826:fd6:e479:c926:fbf2:9b00:0/104",
		"d882:1e41:ba8c:7b3c:9850:dfc0::/94",
		"d8f8:97ac::/33",
		"d9a3:874:792c:8ee8:8000::/65",
		"d9c5:ea76:e06a:900c:5380::/73",
		"da40::/11",
		"da86:b5d8:c000::/35",
		"da89:5521:1116::/47",
		"dabc:910c:752f:7f10:f000::/74",
		"dad4:3bf0:48a0:39e7:6f70:e32d:6000:0/101",
		"db00::/8",
		"db20:8148:ea10:631:1a24:ed7c:c4c4:0/111",
		"db31:938b:9e9f:dcc::/62",
		"db65:3911:2f69:dda8::/64",
		"db73:8400::/22",
		"db8a:5cf8:2d6d:c84f:36a0::/75",
		"dc08:ffb0:da10:9bb3:af6c:ce80::/90",
		"dc47:5a00::/23",
		"dc77:f1c2:f1a1:cacb:e906::/80",
		"dc8f:c87e:df27:b383:9ae9:db8c:7eb2:d800/117",
		"dcaf:47a7:f582:d0f9:d989:9cb2:2ef6:b000/120",
		"dcb3:89ac:728f:5f4c:dfd4:662c::/94",
		"dd3f:5c94:1c81:825e:346f:4f80::/89",
		"dd56:4979:7e00::/39",
		"dd5e:fcb:4db8::/46",
		"dee3:f74:d75e:12a1:ca28:a688:800:0/101",
		"df3d:c584:38ba:f202:ba43:a70d:56c8:18d7/128",
		"df5a:c000::/26",
		"df63:7000::/22",
		"dfe8:c150::/29",
		"e0ae::/15",
		"e0bf:cc6a:3eaa:e3e0:d400::/72",
		"e107:ba02:2e1b:3b4c:8f4d:badf::/105",
		"e19c:bd6f:7ee:8000::/49",
		"e244:7b00::/26",
		"e244:f6be::/33",
		"e28e:687e:9533:3623:96a2:66ff:c9f2:4000/115",
		"e292:bd0:bf10:1bbe:816e:6a0::/93",
		"e2f7::/17",
		"e309:877d:8000::/33",
		"e309:8ea2:b9e9:9043:a10c:5cdd:e200:0/106",
		"e34e:be0::/27",
		"e368:a907:2689:2e2d:cc74::/78",
		"e39f:75a1:20dc:cb27:44b9:d073:5116:ec0/123",
		"e46e:2802:fd39:a707:c399:a940::/90",
		"e495:562e:590e:3473:5f91:f000::/84",
		"e495:9714:cdec:f6bd:14d2:c000::/82",
		"e4a5:8c37:e93a:de59:6d7d:3f00::/88",
		"e500:3800::/22",
		"e501:2f1:56a2:ebc9:8800::/69",
		"e524:4495:9a0e:931a:1de0::/75",
		"e543:9851:da45:8093:8500::/72",
		"e5cc:4101:442:e884:4061:57e4:e339:6400/118",
		"e5d1:3e3e:b401:13e6:6b00::/75",
		"e6bf:ec65::/33",
		"e6dd:bef8::/30",
		"e703:4b78:ea5a:412b:cbd2:551e:4318:0/110",
		"e70a:2368:f08a:9a25:d82c:b000::/84",
		"e723::/17",
		"e729:dc8:d650:ca6f:cdbb:a56a:d8ba:ac00/121",
		"e74d:cb95:179b:ecc4:c5d7:c580::/95",
		"e753:4626:3300::/42",
		"e780:86b8::/31",
		"e7c0::/10",
		"e7e2:2824:c72e:fac0::/61",
		"e85f:3257:12f4:128d:18ac:1d9d:4bcc:ffc0/122",
		"e895:5f00::/25",
		"e8a7:cc94:ec20:1264:da1c:c000::/86",
		"e8d0:718d:68f:9c1a:d593:f8c8:e40a:b98/126",
		"e8f7:9f0e:9ac8::/46",
		"e906:2980::/26",
		"e994::/15",
		"ea0e:68a3:c1af:207a:bb6e:fb0f:9000:0/101",
		"ea84::/14",
		"ea98:8398::/30",
		"eabf:568:f800::/37",
		"ebd6:5000::/21",
		"ec57:d6e:4690:a708:de90:f7d7:fa4d:c000/117",
		"ece0::/11",
		"ecee:4a9e:2a05:faf1:6800::/70",
		"ee16:90c4:79dc:fbc4:7b90:5424:82bf:782c/126",
		"ee82:7282:4c54:a99d:c92c:dd80::/90",
		"eec3:4c36:7674:cb74:970b:fbd8:346c:ed80/121",
		"eece:adca:59c7:b935:fb3e:1105:3180:0/106",
		"ef05:15bb:b0d5:6ce8::/64",
		"ef87:7ab1:fa38:db22:3e00::/71",
		"efa3:1cb4:dbed:b4c8:ec3c:8cbf:26b1:e800/117",
		"f000::/4",
		"f000::/6",
		"f00e:e2bd:f42b:6914:3bbf:4cce:c000:0/101",
		"f024:f65c:623f:1fe4:73cd:7485:ab00:0/108",
		"f080:efe:6201:e7e3:1d3a:5da4::/94",
		"f0aa:eb29:7e16:5d0d:8000::/65",
		"f0b5:a315:724c:7af1:7ba:ce40::/90",
		"f15d:8520:201f:fc3b:47c8:1000::/84",
		"f177:c544:8b96:d600::/55",
		"f268:5000::/20",
		"f2c0::/10",
		"f380::/9",
		"f3e0:7c7a:7b00::/41",
		"f460:c826:a1b3:7f3f:79c6:48f4:a61c:2a0c/126",
		"f461:1161:78a0:8882:7ae0::/75",
		"f4a4:cd8d:7d3e:712f:ef00::/73",
		"f4c5:6b9a:bc00::/38",
		"f4fc:d600::/25",
		"f50f:2c00::/23",
		"f514:efaa:8d4a:1342:cd83:4c00::/89",
		"f57b:bb1:31e8::/48",
		"f586:dafe:3829:8aa0::/59",
		"f5dd:8f18:e04a:4200::/55",
		"f611:68a:f458:4480::/57",
		"f619:490b:23c6:8000::/51",
		"f646:800::/21",
		"f65f:79aa:1747:44a4::/62",
		"f68f:1e3a:c4a7:5df4:45ce:585d::/98",
		"f698:f8e5:cf36:3000::/53",
		"f6a0:2405:d19d:1ca6:8c40::/77",
		"f6ea:b7cb:e464:8850:c27e:d0a:d2e6:be60/123",
		"f707:2300::/25",
		"f7a3:4947:e421:26e8::/62",
		"f7d5:7bc3:3cc9:a000::/53",
		"f84e:5658:b780:1e23:4a7e:a6c5:866c:4dd4/126",
		"f880:d6f9:3000::/39",
		"f888:e4e9:d797:9b4d:f834:ea00::/87",
		"f8b6:7e45:1b7d:a225:cd0:6185:cbe0:0/108",
		"f8fc:2454:1c3b:6bd9:e672:30b0:27b7:e000/120",
		"f95a:9b00::/24",
		"f9a3:8e5:fb25:aa40::/59",
		"fa01:a129:aff7::/50",
		"fa41:c948:3d00::/45",
		"fa65:df94:a47d:f7fa:d5f7::/80",
		"fa9b::/16",
		"faa5:fa00::/23",
		"fad2:8000::/17",
		"fb48:26e2:d3aa:4530:2ca2:cc08:a000:0/100",
		"fb7a:4d29:44f:47a2:501b:3779:4558:9840/122",
		"fbff:dfc9:96e1:2336:be92:9fc9:fff7:4fe0/123",
		"fc23:701a:afcd:6f01:46e9:8800::/85",
		"fc23:b000::/25",
		"fc63:8e3d:5e57:a310::/60",
		"fc67:a6ab:614d:ec98::/61",
		"fca8:2947:a67e:52b1:3d24:fb69:3080:0/105",
		"fd1d:70d0:731a:8e38:a000::/67",
		"fd62:b7a2:6d7f:85dd:874:7000::/84",
		"fd7a:5540::/27",
		"fd83:5343:4000::/34",
		"fdbb:8000::/17",
		"fe3a:d2a6:1c5a:5610:fe10::/78",
		"fe75:c7:ddde:518d:a5c8::/79",
		"fe96:3fba:6d4a:1ec0::/59",
		"fe9b:659c:e4f6::/47",
		"fede:dbc1:203e:9d1d:15b9:2eb2:640:3000/119",
		"fee1:1c66:4b93:55de:f26:3d80::/91",
		"ff3d:ee80::/26",
		"ffa2:ba51:7936::/48",
		"ffd4:5522:501d:2000::/53",
		"fff4:4a80::/27",
	}
)

// TestTree tests the basic functionality of the tree, including adding, finding, and deleting CIDRs.
func TestTree(t *testing.T) {
	tr := NewTree(0)
	if tr == nil || tr.root == nil {
		t.Error("Did not create tree properly")
	}

	// Add a CIDR to the tree
	err := tr.AddCIDRString("1.2.3.0/25", 1)
	if err != nil {
		t.Error(err)
	}

	// Test matching defined CIDR
	info, err := tr.FindCIDRString("1.2.3.1/25")
	if err != nil {
		t.Error(err)
	}
	if info.(int) != 1 {
		t.Errorf("Wrong value, expected 1, got %v", info)
	}

	// Test inside defined CIDR
	info, err = tr.FindCIDRString("1.2.3.60/32")
	if err != nil {
		t.Error(err)
	}
	if info.(int) != 1 {
		t.Errorf("Wrong value, expected 1, got %v", info)
	}
	info, err = tr.FindCIDRString("1.2.3.60")
	if err != nil {
		t.Error(err)
	}
	if info.(int) != 1 {
		t.Errorf("Wrong value, expected 1, got %v", info)
	}

	// Test outside defined CIDR
	info, err = tr.FindCIDRString("1.2.3.160/32")
	if err != nil {
		t.Error(err)
	}
	if info != nil {
		t.Errorf("Wrong value, expected nil, got %v", info)
	}
	info, err = tr.FindCIDRString("1.2.3.160")
	if err != nil {
		t.Error(err)
	}
	if info != nil {
		t.Errorf("Wrong value, expected nil, got %v", info)
	}

	info, err = tr.FindCIDRString("1.2.3.128/25")
	if err != nil {
		t.Error(err)
	}
	if info != nil {
		t.Errorf("Wrong value, expected nil, got %v", info)
	}

	// Test covering not defined
	info, err = tr.FindCIDRString("1.2.3.0/24")
	if err != nil {
		t.Error(err)
	}
	if info != nil {
		t.Errorf("Wrong value, expected nil, got %v", info)
	}

	// Add a covering CIDR to the tree
	err = tr.AddCIDRString("1.2.3.0/24", 2)
	if err != nil {
		t.Error(err)
	}
	info, err = tr.FindCIDRString("1.2.3.0/24")
	if err != nil {
		t.Error(err)
	}
	if info.(int) != 2 {
		t.Errorf("Wrong value, expected 2, got %v", info)
	}

	info, err = tr.FindCIDRString("1.2.3.160/32")
	if err != nil {
		t.Error(err)
	}
	if info.(int) != 2 {
		t.Errorf("Wrong value, expected 2, got %v", info)
	}

	// Test hitting both covering and internal, should choose most specific
	info, err = tr.FindCIDRString("1.2.3.0/32")
	if err != nil {
		t.Error(err)
	}
	if info.(int) != 1 {
		t.Errorf("Wrong value, expected 1, got %v", info)
	}

	// Delete internal CIDR
	err = tr.DeleteCIDRString("1.2.3.0/25")
	if err != nil {
		t.Error(err)
	}

	// Test hitting covering with old IP
	info, err = tr.FindCIDRString("1.2.3.0/32")
	if err != nil {
		t.Error(err)
	}
	if info.(int) != 2 {
		t.Errorf("Wrong value, expected 2, got %v", info)
	}

	// Add internal CIDR back in
	err = tr.AddCIDRString("1.2.3.0/25", 1)
	if err != nil {
		t.Error(err)
	}

	// Delete covering CIDR
	err = tr.DeleteCIDRString("1.2.3.0/24")
	if err != nil {
		t.Error(err)
	}

	// Test hitting with old IP
	info, err = tr.FindCIDRString("1.2.3.0/32")
	if err != nil {
		t.Error(err)
	}
	if info.(int) != 1 {
		t.Errorf("Wrong value, expected 1, got %v", info)
	}

	// Test finding covering again
	info, err = tr.FindCIDRString("1.2.3.0/24")
	if err != nil {
		t.Error(err)
	}
	if info != nil {
		t.Errorf("Wrong value, expected nil, got %v", info)
	}

	// Add covering CIDR back in
	err = tr.AddCIDRString("1.2.3.0/24", 2)
	if err != nil {
		t.Error(err)
	}
	info, err = tr.FindCIDRString("1.2.3.0/24")
	if err != nil {
		t.Error(err)
	}
	if info.(int) != 2 {
		t.Errorf("Wrong value, expected 2, got %v", info)
	}

	// Delete the whole range
	err = tr.DeleteWholeRangeCIDR("1.2.3.0/24")
	if err != nil {
		t.Error(err)
	}
	// Should be no value for covering
	info, err = tr.FindCIDRString("1.2.3.0/24")
	if err != nil {
		t.Error(err)
	}
	if info != nil {
		t.Errorf("Wrong value, expected nil, got %v", info)
	}
	// Should be no value for internal
	info, err = tr.FindCIDRString("1.2.3.0/32")
	if err != nil {
		t.Error(err)
	}
	if info != nil {
		t.Errorf("Wrong value, expected nil, got %v", info)
	}
}

// TestTreeV6 tests the basic functionality of the tree, including adding, finding, and deleting CIDRs.
func TestTreeV6(t *testing.T) {
	tr := NewTree(0)
	if tr == nil || tr.root == nil {
		t.Error("Did not create tree properly")
	}

	// Add a CIDR to the tree
	err := tr.AddCIDRString("2001:db8::/32", 1)
	if err != nil {
		t.Error(err)
	}

	// Test matching defined CIDR
	info, err := tr.FindCIDRString("2001:db8::1/32")
	if err != nil {
		t.Error(err)
	}
	if info.(int) != 1 {
		t.Errorf("Wrong value, expected 1, got %v", info)
	}

	// Test inside defined CIDR
	info, err = tr.FindCIDRString("2001:db8::60/128")
	if err != nil {
		t.Error(err)
	}
	if info.(int) != 1 {
		t.Errorf("Wrong value, expected 1, got %v", info)
	}
	info, err = tr.FindCIDRString("2001:db8::60")
	if err != nil {
		t.Error(err)
	}
	if info.(int) != 1 {
		t.Errorf("Wrong value, expected 1, got %v", info)
	}

	// Test outside defined CIDR
	info, err = tr.FindCIDRString("2001:db9:1::/128")
	if err != nil {
		t.Error(err)
	}
	if info != nil {
		t.Errorf("Wrong value, expected nil, got %v", info)
	}
	info, err = tr.FindCIDRString("2001:db9:1::")
	if err != nil {
		t.Error(err)
	}
	if info != nil {
		t.Errorf("Wrong value, expected nil, got %v", info)
	}

	info, err = tr.FindCIDRString("2001:db9::8000/33")
	if err != nil {
		t.Error(err)
	}
	if info != nil {
		t.Errorf("Wrong value, expected nil, got %v", info)
	}

	// Test covering not defined
	info, err = tr.FindCIDRString("2001:db8::/31")
	if err != nil {
		t.Error(err)
	}
	if info != nil {
		t.Errorf("Wrong value, expected nil, got %v", info)
	}

	// Add a covering CIDR to the tree
	err = tr.AddCIDRString("2001:db8::/31", 2)
	if err != nil {
		t.Error(err)
	}
	info, err = tr.FindCIDRString("2001:db8::/31")
	if err != nil {
		t.Error(err)
	}
	if info.(int) != 2 {
		t.Errorf("Wrong value, expected 2, got %v", info)
	}

	info, err = tr.FindCIDRString("2001:db9:1::/128")
	if err != nil {
		t.Error(err)
	}
	if info.(int) != 2 {
		t.Errorf("Wrong value, expected 2, got %v", info)
	}

	// Test hitting both covering and internal, should choose most specific
	info, err = tr.FindCIDRString("2001:db8::/128")
	if err != nil {
		t.Error(err)
	}
	if info.(int) != 1 {
		t.Errorf("Wrong value, expected 1, got %v", info)
	}

	// Delete internal CIDR
	err = tr.DeleteCIDRString("2001:db8::/32")
	if err != nil {
		t.Error(err)
	}

	// Test hitting covering with old IP
	info, err = tr.FindCIDRString("2001:db8::/128")
	if err != nil {
		t.Error(err)
	}
	if info.(int) != 2 {
		t.Errorf("Wrong value, expected 2, got %v", info)
	}

	// Add internal CIDR back in
	err = tr.AddCIDRString("2001:db8::/32", 1)
	if err != nil {
		t.Error(err)
	}

	// Delete covering CIDR
	err = tr.DeleteCIDRString("2001:db8::/31")
	if err != nil {
		t.Error(err)
	}

	// Test hitting with old IP
	info, err = tr.FindCIDRString("2001:db8::/128")
	if err != nil {
		t.Error(err)
	}
	if info.(int) != 1 {
		t.Errorf("Wrong value, expected 1, got %v", info)
	}

	// Test finding covering again
	info, err = tr.FindCIDRString("2001:db8::/31")
	if err != nil {
		t.Error(err)
	}
	if info != nil {
		t.Errorf("Wrong value, expected nil, got %v", info)
	}

	// Add covering CIDR back in
	err = tr.AddCIDRString("2001:db8::/31", 2)
	if err != nil {
		t.Error(err)
	}
	info, err = tr.FindCIDRString("2001:db8::/31")
	if err != nil {
		t.Error(err)
	}
	if info.(int) != 2 {
		t.Errorf("Wrong value, expected 2, got %v", info)
	}

	// Delete the whole range
	err = tr.DeleteWholeRangeCIDR("2001:db8::/31")
	if err != nil {
		t.Error(err)
	}
	// Should be no value for covering
	info, err = tr.FindCIDRString("2001:db8::/31")
	if err != nil {
		t.Error(err)
	}
	if info != nil {
		t.Errorf("Wrong value, expected nil, got %v", info)
	}
	// Should be no value for internal
	info, err = tr.FindCIDRString("2001:db8::/128")
	if err != nil {
		t.Error(err)
	}
	if info != nil {
		t.Errorf("Wrong value, expected nil, got %v", info)
	}
}

// TestSetV4 tests the SetCIDR functionality of the tr.
func TestSetV4(t *testing.T) {
	tr := NewTree(0)
	if tr == nil || tr.root == nil {
		t.Error("Did not create tree properly")
	}

	// Add a CIDR to the tree
	tr.AddCIDRString("1.1.1.0/24", 1)
	info, err := tr.FindCIDRString("1.1.1.0")
	if err != nil {
		t.Error(err)
	}
	if info.(int) != 1 {
		t.Errorf("Wrong value, expected 1, got %v", info)
	}

	// Add a more specific CIDR to the tree
	tr.AddCIDRString("1.1.1.0/25", 2)
	info, err = tr.FindCIDRString("1.1.1.0")
	if err != nil {
		t.Error(err)
	}
	if info.(int) != 2 {
		t.Errorf("Wrong value, expected 2, got %v", info)
	}
	info, err = tr.FindCIDRString("1.1.1.0/24")
	if err != nil {
		t.Error(err)
	}
	if info.(int) != 1 {
		t.Errorf("Wrong value, expected 1, got %v", info)
	}

	// Add covering CIDR should fail
	err = tr.AddCIDRString("1.1.1.0/24", 60)
	if err != ErrNodeBusy {
		t.Errorf("Should have gotten ErrNodeBusy, instead got err: %v", err)
	}

	// Set covering CIDR
	err = tr.SetCIDRString("1.1.1.0/24", 3)
	if err != nil {
		t.Error(err)
	}
	info, err = tr.FindCIDRString("1.1.1.0")
	if err != nil {
		t.Error(err)
	}
	if info.(int) != 2 {
		t.Errorf("Wrong value, expected 2, got %v", info)
	}
	info, err = tr.FindCIDRString("1.1.1.0/24")
	if err != nil {
		t.Error(err)
	}
	if info.(int) != 3 {
		t.Errorf("Wrong value, expected 3, got %v", info)
	}

	// Set internal CIDR
	err = tr.SetCIDRString("1.1.1.0/25", 4)
	if err != nil {
		t.Error(err)
	}
	info, err = tr.FindCIDRString("1.1.1.0")
	if err != nil {
		t.Error(err)
	}
	if info.(int) != 4 {
		t.Errorf("Wrong value, expected 4, got %v", info)
	}
	info, err = tr.FindCIDRString("1.1.1.0/24")
	if err != nil {
		t.Error(err)
	}
	if info.(int) != 3 {
		t.Errorf("Wrong value, expected 3, got %v", info)
	}
}

// TestSetV6 tests the SetCIDR functionality of the tr.
func TestSetV6(t *testing.T) {
	tr := NewTree(0)
	if tr == nil || tr.root == nil {
		t.Error("Did not create tree properly")
	}

	// Add a CIDR to the tree
	tr.AddCIDRString("dead::0/16", 1)
	info, err := tr.FindCIDRString("dead::beef")
	if err != nil {
		t.Error(err)
	}
	if info.(int) != 1 {
		t.Errorf("Wrong value, expected 1, got %v", info)
	}

	// Add a more specific CIDR to the tree
	tr.AddCIDRString("dead:beef::0/48", 2)
	info, err = tr.FindCIDRString("dead:beef::beef")
	if err != nil {
		t.Error(err)
	}
	if info.(int) != 2 {
		t.Errorf("Wrong value, expected 2, got %v", info)
	}
	info, err = tr.FindCIDRString("dead::0/16")
	if err != nil {
		t.Error(err)
	}
	if info.(int) != 1 {
		t.Errorf("Wrong value, expected 1, got %v", info)
	}

	// Add covering CIDR should fail
	err = tr.AddCIDRString("dead::0/16", 60)
	if err != ErrNodeBusy {
		t.Errorf("Should have gotten ErrNodeBusy, instead got err: %v", err)
	}

	// Set covering CIDR
	err = tr.SetCIDRString("dead::0/16", 3)
	if err != nil {
		t.Error(err)
	}
	info, err = tr.FindCIDRString("dead::beef")
	if err != nil {
		t.Error(err)
	}
	if info.(int) != 3 {
		t.Errorf("Wrong value, expected 3, got %v", info)
	}
	info, err = tr.FindCIDRString("dead::0/16")
	if err != nil {
		t.Error(err)
	}
	if info.(int) != 3 {
		t.Errorf("Wrong value, expected 3, got %v", info)
	}

	info, err = tr.FindCIDRString("dead:beef::beef")
	if err != nil {
		t.Error(err)
	}
	if info.(int) != 2 {
		t.Errorf("Wrong value, expected 2, got %v", info)
	}
	// Set another overlapping CIDR
	err = tr.SetCIDRString("dead:beef::0/48", 4)
	if err != nil {
		t.Error(err)
	}
	info, err = tr.FindCIDRString("dead:beef::beef")
	if err != nil {
		t.Error(err)
	}
	if info.(int) != 4 {
		t.Errorf("Wrong value, expected 4, got %v", info)
	}
	info, err = tr.FindCIDRString("dead::0/16")
	if err != nil {
		t.Error(err)
	}
	if info.(int) != 3 {
		t.Errorf("Wrong value, expected 3, got %v", info)
	}
}

// TestRegression tests a specific regression case where deleting and adding CIDRs caused issues.
func TestRegression(t *testing.T) {
	tr := NewTree(0)
	if tr == nil || tr.root == nil {
		t.Error("Did not create tree properly")
	}

	// Add a CIDR to the tree
	tr.AddCIDRString("1.1.1.0/24", 1)

	// Delete the CIDR and add a more specific CIDR
	tr.DeleteCIDRString("1.1.1.0/24")
	tr.AddCIDRString("1.1.1.0/25", 2)

	// Test inside old range, outside new range
	info, err := tr.FindCIDRString("1.1.1.128")
	if err != nil {
		t.Error(err)
	} else if info != nil {
		t.Errorf("Wrong value, expected nil, got %v", info)
	}
}

// TestTree6 tests the functionality of the tree with IPv6 addresses.
func TestTree6(t *testing.T) {
	tr := NewTree(0)
	if tr == nil || tr.root == nil {
		t.Error("Did not create tree properly")
	}

	// Add an IPv6 CIDR to the tree
	err := tr.AddCIDRString("dead::0/16", 3)
	if err != nil {
		t.Error(err)
	}

	// Test matching defined IPv6 CIDR
	info, err := tr.FindCIDRString("dead::beef")
	if err != nil {
		t.Error(err)
	}
	if info.(int) != 3 {
		t.Errorf("Wrong value, expected 3, got %v", info)
	}

	// Test outside defined IPv6 CIDR
	info, err = tr.FindCIDRString("deed::beef/32")
	if err != nil {
		t.Error(err)
	}
	if info != nil {
		t.Errorf("Wrong value, expected nil, got %v", info)
	}

	// Add a more specific IPv6 CIDR to the tree
	err = tr.AddCIDRString("dead:beef::0/48", 4)
	if err != nil {
		t.Error(err)
	}

	// Test matching defined IPv6 subnet
	info, err = tr.FindCIDRString("dead:beef::0a5c:0/64")
	if err != nil {
		t.Error(err)
	}
	if info.(int) != 4 {
		t.Errorf("Wrong value, expected 4, got %v", info)
	}

	// Test matching outside defined IPv6 subnet
	info, err = tr.FindCIDRString("dead:0::beef:0a5c:0/64")
	if err != nil {
		t.Error(err)
	}
	if info.(int) != 3 {
		t.Errorf("Wrong value, expected 3, got %v", info)
	}
}

// TestRegression6 tests a specific regression case with IPv6 addresses where /128 addresses caused panic.
func TestRegression6(t *testing.T) {
	tr := NewTree(0)
	if tr == nil || tr.root == nil {
		t.Error("Did not create tree properly")
	}

	// Add IPv6 CIDRs to the tree
	tr.AddCIDRString("2620:10f::/32", 54321)
	tr.AddCIDRString("2620:10f:d000:100::5/128", 12345)

	// Test finding the /128 IPv6 address
	info, err := tr.FindCIDRString("2620:10f:d000:100::5/128")
	if err != nil {
		t.Errorf("Could not get /128 address from the tree, error: %s", err)
	} else if info.(int) != 12345 {
		t.Errorf("Wrong value from /128 test, got %d, expected 12345", info)
	}
}

// Test walking tree using netip.Prefix
func TestWalkV4Tree(t *testing.T) {
	tr := NewTree(0)
	if tr == nil || tr.root == nil {
		t.Error("Did not create tree properly")
	}

	netipPrefixesV4 := []netip.Prefix{}
	for i := range testPrefixesV4 {
		pfx, err := netip.ParsePrefix(testPrefixesV4[i])
		if err != nil {
			t.Errorf("failed to parse prefix: %s", err)
		}
		if !pfx.IsValid() {
			t.Errorf("prefix is not valid during add: %s", pfx)
		}
		netipPrefixesV4 = append(netipPrefixesV4, pfx)
	}

	for i := range testPrefixesV4 {
		tr.AddCIDRString(testPrefixesV4[i], i)
	}

	walkedDataV4 := []netip.Prefix{}
	tr.WalkV4(func(prefix netip.Prefix, value interface{}) error {
		if !prefix.IsValid() {
			t.Errorf("prefix is not valid: %s", prefix)
		}
		walkedDataV4 = append(walkedDataV4, prefix)
		return nil
	})

	if len(walkedDataV4) != len(netipPrefixesV4) {
		t.Logf("walked data len(): %+v", len(walkedDataV4))
		t.Logf("expected data len(): %+v", len(netipPrefixesV4))
		t.Errorf("length of walked data does not match expected data")
	}

	for i := range walkedDataV4 {
		for j := range netipPrefixesV4 {
			if walkedDataV4[i] == netipPrefixesV4[j] {
				break
			}
			if j == len(netipPrefixesV4)-1 {
				t.Errorf("walked data does not match expected data, missing prefix: %s", walkedDataV4[i])
			}
		}
	}

}

// Test walking tree using netip.Prefix for IPv6
func TestWalkV6Tree(t *testing.T) {
	tr := NewTree(0)
	if tr == nil || tr.root == nil {
		t.Error("Did not create tree properly")
	}

	netipPrefixesV6 := []netip.Prefix{}
	for i := range testPrefixesV6 { // Assume testPrefixesV6 is defined for IPv6
		pfx, err := netip.ParsePrefix(testPrefixesV6[i])
		if err != nil {
			t.Errorf("failed to parse prefix: %s", err)
		}
		if !pfx.IsValid() {
			t.Errorf("prefix is not valid during add: %s", pfx)
		}
		netipPrefixesV6 = append(netipPrefixesV6, pfx)
	}

	for i := range testPrefixesV6 {
		tr.AddCIDRString(testPrefixesV6[i], i)
	}

	walkedDataV6 := []netip.Prefix{}
	tr.WalkV6(func(prefix netip.Prefix, value interface{}) error {
		if !prefix.IsValid() {
			t.Errorf("prefix is not valid: %s", prefix)
		}
		t.Logf("walked prefix: %s", prefix)
		walkedDataV6 = append(walkedDataV6, prefix)
		return nil
	})

	if len(walkedDataV6) != len(netipPrefixesV6) {
		t.Logf("walked data len(): %+v", len(walkedDataV6))
		t.Logf("expected data len(): %+v", len(netipPrefixesV6))
		t.Errorf("length of walked data does not match expected data")
	}

	for i := range walkedDataV6 {
		for j := range netipPrefixesV6 {
			if walkedDataV6[i].Addr() == netipPrefixesV6[j].Addr() && walkedDataV6[i].Bits() == netipPrefixesV6[j].Bits() {
				break
			}
			if j == len(netipPrefixesV6)-1 {
				t.Errorf("walked data does not match expected data, missing prefix: %s", walkedDataV6[i])
			}
		}
	}
}

// Test walking tree using netip.Prefix with both IPv4 and IPv6
func TestWalkV4V6Tree(t *testing.T) {
	tr := NewTree(0)
	if tr == nil || tr.root == nil {
		t.Error("Did not create tree properly")
	}

	netipPrefixesV4 := []netip.Prefix{}
	for i := range testPrefixesV4 {
		pfx, err := netip.ParsePrefix(testPrefixesV4[i])
		if err != nil {
			t.Errorf("failed to parse prefix: %s", err)
		}
		if !pfx.IsValid() {
			t.Errorf("prefix is not valid during add: %s", pfx)
		}
		if !pfx.Addr().Is4() {
			t.Errorf("prefix is not IPv4 during add: %s", pfx)
		}
		netipPrefixesV4 = append(netipPrefixesV4, pfx)
	}
	netipPrefixesV6 := []netip.Prefix{}
	for i := range testPrefixesV6 {
		pfx, err := netip.ParsePrefix(testPrefixesV6[i])
		if err != nil {
			t.Errorf("failed to parse prefix: %s", err)
		}
		if !pfx.IsValid() {
			t.Errorf("prefix is not valid during add: %s", pfx)
		}
		if !pfx.Addr().Is6() {
			t.Errorf("prefix is not IPv6 during add: %s", pfx)
		}
		netipPrefixesV6 = append(netipPrefixesV6, pfx)
	}

	// for i := range testPrefixesV4 {
	// 	tr.AddCIDRString(testPrefixesV4[i], i)
	// }
	// for i := range testPrefixesV6 {
	// 	tr.AddCIDRString(testPrefixesV6[i], i)
	// }

	for i := range netipPrefixesV4 {
		tr.AddCIDRNetIPPrefix(netipPrefixesV4[i], i)
	}
	for i := range netipPrefixesV6 {
		tr.AddCIDRNetIPPrefix(netipPrefixesV6[i], i)
	}

	walkedDataV4 := []netip.Prefix{}
	tr.WalkV4(func(prefix netip.Prefix, value interface{}) error {
		if !prefix.IsValid() {
			t.Errorf("v4 prefix is not valid: %s value(%v)", prefix, value)
		}
		walkedDataV4 = append(walkedDataV4, prefix)
		return nil
	})

	walkedDataV6 := []netip.Prefix{}
	tr.WalkV6(func(prefix netip.Prefix, value interface{}) error {
		if !prefix.IsValid() {
			t.Errorf("v6 prefix is not valid: %s", prefix)
		}
		walkedDataV6 = append(walkedDataV6, prefix)
		return nil
	})

	if len(walkedDataV4) != len(netipPrefixesV4) {
		t.Logf("walked v4 data len(): %+v", len(walkedDataV4))
		t.Logf("expected v4 data len(): %+v", len(netipPrefixesV4))
		t.Errorf("length of walked v4 data does not match expected data")
	}

	for i := range walkedDataV4 {
		for j := range netipPrefixesV4 {
			if walkedDataV4[i] == netipPrefixesV4[j] {
				break
			}
			if j == len(netipPrefixesV4)-1 {
				t.Errorf("walked data does not match expected data, missing prefix: %s", walkedDataV4[i])
			}
		}
	}

	if len(walkedDataV6) != len(netipPrefixesV6) {
		t.Logf("walked v6 data len(): %+v", len(walkedDataV6))
		t.Logf("expected v6 data len(): %+v", len(netipPrefixesV6))
		t.Errorf("length of walked v6 data does not match expected data")
	}

	for i := range walkedDataV6 {
		for j := range netipPrefixesV6 {
			if walkedDataV6[i] == netipPrefixesV6[j] {
				break
			}
			if j == len(netipPrefixesV6)-1 {
				t.Errorf("walked data does not match expected data, missing prefix: %s", walkedDataV6[i])
			}
		}
	}
}

func BenchmarkWalkV4Tree(b *testing.B) {
	tr := NewTree(0)
	if tr == nil || tr.root == nil {
		b.Error("Did not create tree properly")
	}
	for i := range testPrefixesV4 {
		tr.AddCIDRString(testPrefixesV4[i], i)
	}
	b.N = 20000
	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		tr.WalkV4(func(prefix netip.Prefix, value interface{}) error { return nil })
	}
}

// TestWalkV4TreeWithError tests walking the tree with an error return
func TestWalkV4TreeWithError(t *testing.T) {
	tr := NewTree(0)
	if tr == nil || tr.root == nil {
		t.Error("Did not create tree properly")
	}

	// Add some test prefixes
	tr.AddCIDRString("192.168.1.0/24", 1)
	tr.AddCIDRString("10.0.0.0/8", 2)
	tr.AddCIDRString("172.16.0.0/12", 3)

	// Add some IPv6 test prefixes
	tr.AddCIDRString("2001:db8::/32", 4)
	tr.AddCIDRString("2001:0db8:85a3::/64", 5)

	// Test walking with error return
	results := make(map[netip.Prefix]interface{})
	err := tr.WalkV4(func(prefix netip.Prefix, value interface{}) error {
		if prefix.Addr().Is4() {
			results[prefix] = value
		}
		if len(results) > 3 {
			t.Errorf("got too many")
		}
		return nil
	})
	if err != nil {
		t.Errorf("Expected no error but got %v", err)
	}

	if len(results) != 3 {
		t.Errorf("Expected walk to visit 3 nodes but got %d", len(results))
	}

	// Test walking IPv6 tree when only IPv4 prefixes are present
	v6Results := make(map[netip.Prefix]interface{})
	err = tr.WalkV6(func(prefix netip.Prefix, value interface{}) error {
		v6Results[prefix] = value
		return nil
	})
	if err != nil {
		t.Errorf("Expected no error but got %v", err)
	}

	t.Logf("v6Results: %+v", v6Results)

	if len(v6Results) != 2 {
		t.Errorf("Expected 2 IPv6 prefixes but got %d", len(v6Results))
	}
}

func TestSetCIDRNetIPPrefix(t *testing.T) {
	tr := NewTree(0)
	if tr == nil || tr.root == nil {
		t.Error("Did not create tree properly")
	}

	// Test setting a new IPv4 prefix
	prefixV4, _ := netip.ParsePrefix("192.168.1.0/24")
	err := tr.SetCIDRNetIPPrefix(prefixV4, 1)
	if err != nil {
		t.Errorf("Failed to set IPv4 prefix: %v", err)
	}
	info, err := tr.FindCIDRString("192.168.1.0")
	if err != nil {
		t.Error(err)
	}
	if info.(int) != 1 {
		t.Errorf("Wrong value, expected 1, got %v", info)
	}

	// Test updating an existing IPv4 prefix
	err = tr.SetCIDRNetIPPrefix(prefixV4, 2)
	if err != nil {
		t.Errorf("Failed to update IPv4 prefix: %v", err)
	}
	info, err = tr.FindCIDRString("192.168.1.0")
	if err != nil {
		t.Error(err)
	}
	if info.(int) != 2 {
		t.Errorf("Wrong value, expected 2, got %v", info)
	}

	// Test setting a new IPv6 prefix
	prefixV6, _ := netip.ParsePrefix("2001:db8::/32")
	err = tr.SetCIDRNetIPPrefix(prefixV6, 3)
	if err != nil {
		t.Errorf("Failed to set IPv6 prefix: %v", err)
	}
	info, err = tr.FindCIDRString("2001:db8::1")
	if err != nil {
		t.Error(err)
	}
	if info.(int) != 3 {
		t.Errorf("Wrong value, expected 3, got %v", info)
	}

	// Test updating an existing IPv6 prefix
	err = tr.SetCIDRNetIPPrefix(prefixV6, 4)
	if err != nil {
		t.Errorf("Failed to update IPv6 prefix: %v", err)
	}
	info, err = tr.FindCIDRString("2001:db8::1")
	if err != nil {
		t.Error(err)
	}
	if info.(int) != 4 {
		t.Errorf("Wrong value, expected 4, got %v", info)
	}

	// Test setting an overlapping prefix
	overlapPrefixV4, _ := netip.ParsePrefix("192.168.1.0/25")
	err = tr.SetCIDRNetIPPrefix(overlapPrefixV4, 5)
	if err != nil {
		t.Errorf("Failed to set overlapping IPv4 prefix: %v", err)
	}
	info, err = tr.FindCIDRString("192.168.1.0")
	if err != nil {
		t.Error(err)
	}
	if info.(int) != 5 {
		t.Errorf("Wrong value, expected 5, got %v", info)
	}

	// Test setting an invalid prefix
	invalidPrefix, _ := netip.ParsePrefix("300.300.300.300/32")
	err = tr.SetCIDRNetIPPrefix(invalidPrefix, 6)
	if err == nil {
		t.Error("Expected error for invalid prefix, got none")
	}

	// // Test setting a prefix with a nil tree
	// var nilTree *Tree
	// err = nilTree.SetCIDRNetIPPrefix(prefixV4, 7)
	// if err == nil {
	// 	t.Error("Expected error for nil tree, got none")
	// }
}
